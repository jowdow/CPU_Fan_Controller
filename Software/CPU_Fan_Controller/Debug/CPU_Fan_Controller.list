
CPU_Fan_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002378  08002378  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002378  08002378  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800238c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800238c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f816  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002890  00000000  00000000  0002f88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006e90  00000000  00000000  0003211d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000950  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d08  00000000  00000000  00039900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000162de  00000000  00000000  0003a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013024  00000000  00000000  000508e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008d56b  00000000  00000000  0006390a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001bc0  00000000  00000000  000f0e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  000f2a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002244 	.word	0x08002244

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002244 	.word	0x08002244

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b510      	push	{r4, lr}
 800021a:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021c:	220c      	movs	r2, #12
 800021e:	2100      	movs	r1, #0
 8000220:	a801      	add	r0, sp, #4
 8000222:	f001 ffe3 	bl	80021ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000226:	4c1a      	ldr	r4, [pc, #104]	; (8000290 <MX_ADC1_Init+0x78>)
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_ADC1_Init+0x7c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800022a:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 800022c:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800022e:	2380      	movs	r3, #128	; 0x80
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000230:	2101      	movs	r1, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000232:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000234:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000236:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000238:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023a:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 1;
 800023c:	61e1      	str	r1, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800023e:	311f      	adds	r1, #31
 8000240:	5462      	strb	r2, [r4, r1]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000242:	310c      	adds	r1, #12
 8000244:	5462      	strb	r2, [r4, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000246:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 8000248:	3110      	adds	r1, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800024a:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800024c:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024e:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000250:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000252:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000256:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000258:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800025a:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800025c:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800025e:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000260:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	f000 fa91 	bl	8000788 <HAL_ADC_Init>
 8000266:	2800      	cmp	r0, #0
 8000268:	d10c      	bne.n	8000284 <MX_ADC1_Init+0x6c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <MX_ADC1_Init+0x80>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 800026e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000270:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000272:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000276:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000278:	f000 fc14 	bl	8000aa4 <HAL_ADC_ConfigChannel>
 800027c:	2800      	cmp	r0, #0
 800027e:	d104      	bne.n	800028a <MX_ADC1_Init+0x72>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000280:	b004      	add	sp, #16
 8000282:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000284:	f000 f8bc 	bl	8000400 <Error_Handler>
 8000288:	e7ef      	b.n	800026a <MX_ADC1_Init+0x52>
    Error_Handler();
 800028a:	f000 f8b9 	bl	8000400 <Error_Handler>
}
 800028e:	e7f7      	b.n	8000280 <MX_ADC1_Init+0x68>
 8000290:	20000028 	.word	0x20000028
 8000294:	40012400 	.word	0x40012400
 8000298:	2c000800 	.word	0x2c000800

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b510      	push	{r4, lr}
 800029e:	0004      	movs	r4, r0
 80002a0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	2214      	movs	r2, #20
 80002a4:	2100      	movs	r1, #0
 80002a6:	a803      	add	r0, sp, #12
 80002a8:	f001 ffa0 	bl	80021ec <memset>
  if(adcHandle->Instance==ADC1)
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <HAL_ADC_MspInit+0x54>)
 80002ae:	6822      	ldr	r2, [r4, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d001      	beq.n	80002b8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002b4:	b008      	add	sp, #32
 80002b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <HAL_ADC_MspInit+0x58>)
 80002bc:	0349      	lsls	r1, r1, #13
 80002be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80002c2:	430a      	orrs	r2, r1
 80002c4:	641a      	str	r2, [r3, #64]	; 0x40
 80002c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002c8:	400a      	ands	r2, r1
 80002ca:	9201      	str	r2, [sp, #4]
 80002cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	2202      	movs	r2, #2
 80002d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80002d2:	4311      	orrs	r1, r2
 80002d4:	6359      	str	r1, [r3, #52]	; 0x34
 80002d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	401a      	ands	r2, r3
 80002dc:	9202      	str	r2, [sp, #8]
 80002de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e4:	3b7d      	subs	r3, #125	; 0x7d
 80002e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e8:	f000 fe94 	bl	8001014 <HAL_GPIO_Init>
}
 80002ec:	e7e2      	b.n	80002b4 <HAL_ADC_MspInit+0x18>
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	40012400 	.word	0x40012400
 80002f4:	40021000 	.word	0x40021000
 80002f8:	50000400 	.word	0x50000400

080002fc <MX_GPIO_Init>:
/** Configure pins
*/
void MX_GPIO_Init(void)
{

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80002fc:	200d      	movs	r0, #13
{
 80002fe:	b500      	push	{lr}
 8000300:	b085      	sub	sp, #20
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000302:	2203      	movs	r2, #3
 8000304:	2100      	movs	r1, #0
 8000306:	4468      	add	r0, sp
 8000308:	f001 ff70 	bl	80021ec <memset>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800030c:	2202      	movs	r2, #2
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_GPIO_Init+0x7c>)
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 8000310:	2007      	movs	r0, #7
 8000312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000314:	4311      	orrs	r1, r2
 8000316:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800031a:	400a      	ands	r2, r1
 800031c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800031e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000320:	2201      	movs	r2, #1
 8000322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000324:	4311      	orrs	r1, r2
 8000326:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <MX_GPIO_Init+0x80>)
 800032c:	4013      	ands	r3, r2
 800032e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000330:	9b00      	ldr	r3, [sp, #0]
 8000332:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 8000334:	4383      	bics	r3, r0
 8000336:	66cb      	str	r3, [r1, #108]	; 0x6c

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE12);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	015b      	lsls	r3, r3, #5
 800033c:	9302      	str	r3, [sp, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 800033e:	466b      	mov	r3, sp
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000340:	a802      	add	r0, sp, #8
  EXTI_InitStruct.LineCommand = ENABLE;
 8000342:	731a      	strb	r2, [r3, #12]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000344:	739a      	strb	r2, [r3, #14]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000346:	f001 fef1 	bl	800212c <LL_EXTI_Init>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800034a:	23a0      	movs	r3, #160	; 0xa0
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	68d9      	ldr	r1, [r3, #12]
 8000352:	480b      	ldr	r0, [pc, #44]	; (8000380 <MX_GPIO_Init+0x84>)
 8000354:	0492      	lsls	r2, r2, #18
 8000356:	4001      	ands	r1, r0
 8000358:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035a:	21c1      	movs	r1, #193	; 0xc1
 800035c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	0089      	lsls	r1, r1, #2
 8000362:	4002      	ands	r2, r0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <MX_GPIO_Init+0x88>)
 8000368:	5853      	ldr	r3, [r2, r1]
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	0a1b      	lsrs	r3, r3, #8
 800036e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 8000374:	b005      	add	sp, #20
 8000376:	bd00      	pop	{pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40021800 	.word	0x40021800
 8000380:	fcffffff 	.word	0xfcffffff
 8000384:	e000e100 	.word	0xe000e100

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b500      	push	{lr}
 800038a:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038c:	2234      	movs	r2, #52	; 0x34
 800038e:	2100      	movs	r1, #0
 8000390:	a805      	add	r0, sp, #20
 8000392:	f001 ff2b 	bl	80021ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	2210      	movs	r2, #16
 8000398:	2100      	movs	r1, #0
 800039a:	a801      	add	r0, sp, #4
 800039c:	f001 ff26 	bl	80021ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003a0:	2080      	movs	r0, #128	; 0x80
 80003a2:	0080      	lsls	r0, r0, #2
 80003a4:	f000 ff3c 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ba:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f000 ff60 	bl	8001280 <HAL_RCC_OscConfig>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ca:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d0:	2100      	movs	r1, #0
 80003d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d6:	f001 fa03 	bl	80017e0 <HAL_RCC_ClockConfig>
 80003da:	2800      	cmp	r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x5a>
 80003de:	b672      	cpsid	i
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <SystemClock_Config+0x58>
}
 80003e2:	b013      	add	sp, #76	; 0x4c
 80003e4:	bd00      	pop	{pc}
 80003e6:	46c0      	nop			; (mov r8, r8)

080003e8 <main>:
{
 80003e8:	b510      	push	{r4, lr}
  HAL_Init();
 80003ea:	f000 f9a7 	bl	800073c <HAL_Init>
  SystemClock_Config();
 80003ee:	f7ff ffcb 	bl	8000388 <SystemClock_Config>
  MX_GPIO_Init();
 80003f2:	f7ff ff83 	bl	80002fc <MX_GPIO_Init>
  MX_ADC1_Init();
 80003f6:	f7ff ff0f 	bl	8000218 <MX_ADC1_Init>
  MX_TIM1_Init();
 80003fa:	f000 f8e5 	bl	80005c8 <MX_TIM1_Init>
  while (1)
 80003fe:	e7fe      	b.n	80003fe <main+0x16>

08000400 <Error_Handler>:
 8000400:	b672      	cpsid	i
  while (1)
 8000402:	e7fe      	b.n	8000402 <Error_Handler+0x2>

08000404 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	2201      	movs	r2, #1
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x2c>)
{
 8000408:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800040c:	4311      	orrs	r1, r2
 800040e:	6419      	str	r1, [r3, #64]	; 0x40
 8000410:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000412:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000414:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800041c:	0549      	lsls	r1, r1, #21
 800041e:	430a      	orrs	r2, r1
 8000420:	63da      	str	r2, [r3, #60]	; 0x3c
 8000422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000424:	400b      	ands	r3, r1
 8000426:	9301      	str	r3, [sp, #4]
 8000428:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	b002      	add	sp, #8
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
void NMI_Handler(void) {
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000434:	e7fe      	b.n	8000434 <NMI_Handler>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <HardFault_Handler>:
 */
void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000438:	e7fe      	b.n	8000438 <HardFault_Handler>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <SVC_Handler>:

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <PendSV_Handler>:
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <SysTick_Handler>:
}

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000446:	f000 f98d 	bl	8000764 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	if (isFanSpinning) {	// JD - If fan is spinning
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <SysTick_Handler+0x8c>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d100      	bne.n	8000454 <SysTick_Handler+0x10>

			previousADCValue_u32 = ADCValue_u32;
		}
	}
	/* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_ADC_Start(&hadc1);
 8000454:	4c1f      	ldr	r4, [pc, #124]	; (80004d4 <SysTick_Handler+0x90>)
 8000456:	0020      	movs	r0, r4
 8000458:	f000 fcfe 	bl	8000e58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800045c:	2101      	movs	r1, #1
 800045e:	0020      	movs	r0, r4
 8000460:	4249      	negs	r1, r1
 8000462:	f000 fab3 	bl	80009cc <HAL_ADC_PollForConversion>
		ADCValue_u32 = HAL_ADC_GetValue(&hadc1);
 8000466:	0020      	movs	r0, r4
 8000468:	f000 fb18 	bl	8000a9c <HAL_ADC_GetValue>
 800046c:	4d1a      	ldr	r5, [pc, #104]	; (80004d8 <SysTick_Handler+0x94>)
 800046e:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc1);
 8000470:	0020      	movs	r0, r4
 8000472:	f000 fd63 	bl	8000f3c <HAL_ADC_Stop>
		if (ADCValue_u32 > (previousADCValue_u32 + 10)
 8000476:	4c19      	ldr	r4, [pc, #100]	; (80004dc <SysTick_Handler+0x98>)
 8000478:	682a      	ldr	r2, [r5, #0]
 800047a:	6823      	ldr	r3, [r4, #0]
 800047c:	0019      	movs	r1, r3
 800047e:	310a      	adds	r1, #10
 8000480:	4291      	cmp	r1, r2
 8000482:	d302      	bcc.n	800048a <SysTick_Handler+0x46>
				|| ADCValue_u32 < (previousADCValue_u32 - 10)) {
 8000484:	3b0a      	subs	r3, #10
 8000486:	429a      	cmp	r2, r3
 8000488:	d2e3      	bcs.n	8000452 <SysTick_Handler+0xe>
			if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Stopping PWM
 800048a:	4e15      	ldr	r6, [pc, #84]	; (80004e0 <SysTick_Handler+0x9c>)
 800048c:	2100      	movs	r1, #0
 800048e:	0030      	movs	r0, r6
 8000490:	f001 fc6c 	bl	8001d6c <HAL_TIM_PWM_Stop>
 8000494:	2800      	cmp	r0, #0
 8000496:	d117      	bne.n	80004c8 <SysTick_Handler+0x84>
			htim1.Instance->CCR1 = ((ADCValue_u32 - 90) * (640 - 0)) / (4095 - 90);
 8000498:	682b      	ldr	r3, [r5, #0]
 800049a:	4912      	ldr	r1, [pc, #72]	; (80004e4 <SysTick_Handler+0xa0>)
 800049c:	0098      	lsls	r0, r3, #2
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <SysTick_Handler+0xa4>)
 80004a2:	01c0      	lsls	r0, r0, #7
 80004a4:	469c      	mov	ip, r3
 80004a6:	4460      	add	r0, ip
 80004a8:	f7ff fe2a 	bl	8000100 <__udivsi3>
 80004ac:	6837      	ldr	r7, [r6, #0]
			if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 80004ae:	2100      	movs	r1, #0
			htim1.Instance->CCR1 = ((ADCValue_u32 - 90) * (640 - 0)) / (4095 - 90);
 80004b0:	6378      	str	r0, [r7, #52]	; 0x34
			if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 80004b2:	0030      	movs	r0, r6
 80004b4:	f001 fc56 	bl	8001d64 <HAL_TIM_PWM_Start>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d102      	bne.n	80004c2 <SysTick_Handler+0x7e>
			previousADCValue_u32 = ADCValue_u32;
 80004bc:	682b      	ldr	r3, [r5, #0]
 80004be:	6023      	str	r3, [r4, #0]
}
 80004c0:	e7c7      	b.n	8000452 <SysTick_Handler+0xe>
				Error_Handler();
 80004c2:	f7ff ff9d 	bl	8000400 <Error_Handler>
 80004c6:	e7f9      	b.n	80004bc <SysTick_Handler+0x78>
				Error_Handler();
 80004c8:	f7ff ff9a 	bl	8000400 <Error_Handler>
 80004cc:	e7e4      	b.n	8000498 <SysTick_Handler+0x54>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000090 	.word	0x20000090
 80004d4:	20000028 	.word	0x20000028
 80004d8:	2000008c 	.word	0x2000008c
 80004dc:	20000094 	.word	0x20000094
 80004e0:	20000098 	.word	0x20000098
 80004e4:	00000fa5 	.word	0x00000fa5
 80004e8:	ffff1f00 	.word	0xffff1f00

080004ec <EXTI4_15_IRQHandler>:
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <EXTI4_15_IRQHandler+0x50>)
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	68d1      	ldr	r1, [r2, #12]
/******************************************************************************/

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void) {
 80004f4:	b510      	push	{r4, lr}
 80004f6:	4219      	tst	r1, r3
 80004f8:	d100      	bne.n	80004fc <EXTI4_15_IRQHandler+0x10>
		/* USER CODE END LL_EXTI_LINE_12_RISING */
	}
	/* USER CODE BEGIN EXTI4_15_IRQn 1 */

	/* USER CODE END EXTI4_15_IRQn 1 */
}
 80004fa:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80004fc:	60d3      	str	r3, [r2, #12]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80004fe:	22a0      	movs	r2, #160	; 0xa0
 8000500:	05d2      	lsls	r2, r2, #23
 8000502:	6912      	ldr	r2, [r2, #16]
 8000504:	421a      	tst	r2, r3
 8000506:	d0f8      	beq.n	80004fa <EXTI4_15_IRQHandler+0xe>
			if (isFanSpinning == 0) {	// JD - If the fan is not spinning
 8000508:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <EXTI4_15_IRQHandler+0x54>)
				if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 800050a:	2100      	movs	r1, #0
			if (isFanSpinning == 0) {	// JD - If the fan is not spinning
 800050c:	7823      	ldrb	r3, [r4, #0]
				if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 800050e:	480d      	ldr	r0, [pc, #52]	; (8000544 <EXTI4_15_IRQHandler+0x58>)
			if (isFanSpinning == 0) {	// JD - If the fan is not spinning
 8000510:	2b00      	cmp	r3, #0
 8000512:	d106      	bne.n	8000522 <EXTI4_15_IRQHandler+0x36>
				if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 8000514:	f001 fc26 	bl	8001d64 <HAL_TIM_PWM_Start>
 8000518:	2800      	cmp	r0, #0
 800051a:	d10c      	bne.n	8000536 <EXTI4_15_IRQHandler+0x4a>
				isFanSpinning = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	7023      	strb	r3, [r4, #0]
 8000520:	e7eb      	b.n	80004fa <EXTI4_15_IRQHandler+0xe>
				if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1) != HAL_OK) {// JD - Starting PWM
 8000522:	f001 fc23 	bl	8001d6c <HAL_TIM_PWM_Stop>
 8000526:	2800      	cmp	r0, #0
 8000528:	d102      	bne.n	8000530 <EXTI4_15_IRQHandler+0x44>
				isFanSpinning = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	7023      	strb	r3, [r4, #0]
}
 800052e:	e7e4      	b.n	80004fa <EXTI4_15_IRQHandler+0xe>
					Error_Handler();
 8000530:	f7ff ff66 	bl	8000400 <Error_Handler>
 8000534:	e7f9      	b.n	800052a <EXTI4_15_IRQHandler+0x3e>
					Error_Handler();
 8000536:	f7ff ff63 	bl	8000400 <Error_Handler>
 800053a:	e7ef      	b.n	800051c <EXTI4_15_IRQHandler+0x30>
 800053c:	40021800 	.word	0x40021800
 8000540:	20000090 	.word	0x20000090
 8000544:	20000098 	.word	0x20000098

08000548 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)

0800054c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_TIM_PWM_MspInit+0x24>)
 800054e:	6802      	ldr	r2, [r0, #0]
{
 8000550:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 8000552:	429a      	cmp	r2, r3
 8000554:	d001      	beq.n	800055a <HAL_TIM_PWM_MspInit+0xe>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000556:	b002      	add	sp, #8
 8000558:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_TIM_PWM_MspInit+0x28>)
 800055e:	0109      	lsls	r1, r1, #4
 8000560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000562:	430a      	orrs	r2, r1
 8000564:	641a      	str	r2, [r3, #64]	; 0x40
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	400b      	ands	r3, r1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b01      	ldr	r3, [sp, #4]
}
 800056e:	e7f2      	b.n	8000556 <HAL_TIM_PWM_MspInit+0xa>
 8000570:	40012c00 	.word	0x40012c00
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000578:	b510      	push	{r4, lr}
 800057a:	0004      	movs	r4, r0
 800057c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	2214      	movs	r2, #20
 8000580:	2100      	movs	r1, #0
 8000582:	a801      	add	r0, sp, #4
 8000584:	f001 fe32 	bl	80021ec <memset>
  if(timHandle->Instance==TIM1)
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <HAL_TIM_MspPostInit+0x48>)
 800058a:	6822      	ldr	r2, [r4, #0]
 800058c:	429a      	cmp	r2, r3
 800058e:	d001      	beq.n	8000594 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000590:	b006      	add	sp, #24
 8000592:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	2301      	movs	r3, #1
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4319      	orrs	r1, r3
 80005a0:	6351      	str	r1, [r2, #52]	; 0x34
 80005a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4013      	ands	r3, r2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	3bfe      	subs	r3, #254	; 0xfe
 80005b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f000 fd2c 	bl	8001014 <HAL_GPIO_Init>
}
 80005bc:	e7e8      	b.n	8000590 <HAL_TIM_MspPostInit+0x18>
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40012c00 	.word	0x40012c00
 80005c4:	40021000 	.word	0x40021000

080005c8 <MX_TIM1_Init>:
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005cc:	220c      	movs	r2, #12
 80005ce:	2100      	movs	r1, #0
 80005d0:	a801      	add	r0, sp, #4
 80005d2:	f001 fe0b 	bl	80021ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005d6:	221c      	movs	r2, #28
 80005d8:	2100      	movs	r1, #0
 80005da:	a804      	add	r0, sp, #16
 80005dc:	f001 fe06 	bl	80021ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005e0:	2234      	movs	r2, #52	; 0x34
 80005e2:	2100      	movs	r1, #0
 80005e4:	a80b      	add	r0, sp, #44	; 0x2c
 80005e6:	f001 fe01 	bl	80021ec <memset>
  htim1.Instance = TIM1;
 80005ea:	4c29      	ldr	r4, [pc, #164]	; (8000690 <MX_TIM1_Init+0xc8>)
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_TIM1_Init+0xcc>)
  htim1.Init.Period = 639;
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <MX_TIM1_Init+0xd0>)
  htim1.Instance = TIM1;
 80005f0:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 80005f2:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005f4:	0020      	movs	r0, r4
  htim1.Init.Prescaler = 0;
 80005f6:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 639;
 80005fa:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fe:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000600:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000602:	f001 fbfd 	bl	8001e00 <HAL_TIM_PWM_Init>
 8000606:	2800      	cmp	r0, #0
 8000608:	d136      	bne.n	8000678 <MX_TIM1_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800060c:	0020      	movs	r0, r4
 800060e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000612:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000614:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000616:	f001 fcf3 	bl	8002000 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	2800      	cmp	r0, #0
 800061c:	d135      	bne.n	800068a <MX_TIM1_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061e:	2360      	movs	r3, #96	; 0x60
 8000620:	9304      	str	r3, [sp, #16]
  sConfigOC.Pulse = 0;
 8000622:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000624:	2200      	movs	r2, #0
 8000626:	0020      	movs	r0, r4
 8000628:	a904      	add	r1, sp, #16
  sConfigOC.Pulse = 0;
 800062a:	9305      	str	r3, [sp, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062c:	9306      	str	r3, [sp, #24]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800062e:	9307      	str	r3, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000630:	9308      	str	r3, [sp, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000632:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000634:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	f001 fc4f 	bl	8001ed8 <HAL_TIM_PWM_ConfigChannel>
 800063a:	2800      	cmp	r0, #0
 800063c:	d122      	bne.n	8000684 <MX_TIM1_Init+0xbc>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	0192      	lsls	r2, r2, #6
 8000642:	9210      	str	r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000644:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000646:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000648:	0492      	lsls	r2, r2, #18
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800064a:	0020      	movs	r0, r4
 800064c:	a90b      	add	r1, sp, #44	; 0x2c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800064e:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000650:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000652:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 8000654:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000656:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000658:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800065a:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800065c:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800065e:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000660:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000662:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000664:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000666:	f001 fd01 	bl	800206c <HAL_TIMEx_ConfigBreakDeadTime>
 800066a:	2800      	cmp	r0, #0
 800066c:	d107      	bne.n	800067e <MX_TIM1_Init+0xb6>
  HAL_TIM_MspPostInit(&htim1);
 800066e:	0020      	movs	r0, r4
 8000670:	f7ff ff82 	bl	8000578 <HAL_TIM_MspPostInit>
}
 8000674:	b018      	add	sp, #96	; 0x60
 8000676:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000678:	f7ff fec2 	bl	8000400 <Error_Handler>
 800067c:	e7c5      	b.n	800060a <MX_TIM1_Init+0x42>
    Error_Handler();
 800067e:	f7ff febf 	bl	8000400 <Error_Handler>
 8000682:	e7f4      	b.n	800066e <MX_TIM1_Init+0xa6>
    Error_Handler();
 8000684:	f7ff febc 	bl	8000400 <Error_Handler>
 8000688:	e7d9      	b.n	800063e <MX_TIM1_Init+0x76>
    Error_Handler();
 800068a:	f7ff feb9 	bl	8000400 <Error_Handler>
 800068e:	e7c6      	b.n	800061e <MX_TIM1_Init+0x56>
 8000690:	20000098 	.word	0x20000098
 8000694:	40012c00 	.word	0x40012c00
 8000698:	0000027f 	.word	0x0000027f

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f7ff ff52 	bl	8000548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f001 fd97 	bl	80021fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006ce:	f7ff fe8b 	bl	80003e8 <main>

080006d2 <LoopForever>:

LoopForever:
  b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e0:	08002380 	.word	0x08002380
  ldr r2, =_sbss
 80006e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e8:	200000e8 	.word	0x200000e8

080006ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_IRQHandler>
	...

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_InitTick+0x40>)
{
 80006f4:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 80006f6:	7819      	ldrb	r1, [r3, #0]
 80006f8:	2900      	cmp	r1, #0
 80006fa:	d101      	bne.n	8000700 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80006fc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000700:	20fa      	movs	r0, #250	; 0xfa
 8000702:	0080      	lsls	r0, r0, #2
 8000704:	f7ff fcfc 	bl	8000100 <__udivsi3>
 8000708:	4d0a      	ldr	r5, [pc, #40]	; (8000734 <HAL_InitTick+0x44>)
 800070a:	0001      	movs	r1, r0
 800070c:	6828      	ldr	r0, [r5, #0]
 800070e:	f7ff fcf7 	bl	8000100 <__udivsi3>
 8000712:	f000 fc65 	bl	8000fe0 <HAL_SYSTICK_Config>
 8000716:	2800      	cmp	r0, #0
 8000718:	d1f0      	bne.n	80006fc <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	2c03      	cmp	r4, #3
 800071c:	d8ee      	bhi.n	80006fc <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071e:	3801      	subs	r0, #1
 8000720:	2200      	movs	r2, #0
 8000722:	0021      	movs	r1, r4
 8000724:	f000 fc2a 	bl	8000f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <HAL_InitTick+0x48>)
 800072a:	2000      	movs	r0, #0
 800072c:	601c      	str	r4, [r3, #0]
  return status;
 800072e:	e7e6      	b.n	80006fe <HAL_InitTick+0xe>
 8000730:	20000004 	.word	0x20000004
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008

0800073c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_Init+0x24>)
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	6811      	ldr	r1, [r2, #0]
{
 8000744:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000746:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000748:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074c:	f7ff ffd0 	bl	80006f0 <HAL_InitTick>
 8000750:	1e04      	subs	r4, r0, #0
 8000752:	d002      	beq.n	800075a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000754:	2401      	movs	r4, #1
}
 8000756:	0020      	movs	r0, r4
 8000758:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800075a:	f7ff fe53 	bl	8000404 <HAL_MspInit>
 800075e:	e7fa      	b.n	8000756 <HAL_Init+0x1a>
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_IncTick+0x10>)
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <HAL_IncTick+0x14>)
 8000768:	6811      	ldr	r1, [r2, #0]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	185b      	adds	r3, r3, r1
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	4770      	bx	lr
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	200000e4 	.word	0x200000e4
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800077c:	4b01      	ldr	r3, [pc, #4]	; (8000784 <HAL_GetTick+0x8>)
 800077e:	6818      	ldr	r0, [r3, #0]
}
 8000780:	4770      	bx	lr
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	200000e4 	.word	0x200000e4

08000788 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	46d6      	mov	lr, sl
 800078c:	464f      	mov	r7, r9
 800078e:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000790:	2300      	movs	r3, #0
{
 8000792:	b5c0      	push	{r6, r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8000798:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800079a:	d100      	bne.n	800079e <HAL_ADC_Init+0x16>
 800079c:	e0d8      	b.n	8000950 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800079e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d100      	bne.n	80007a6 <HAL_ADC_Init+0x1e>
 80007a4:	e0a8      	b.n	80008f8 <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80007a6:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007a8:	6825      	ldr	r5, [r4, #0]
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	68aa      	ldr	r2, [r5, #8]
 80007ae:	421a      	tst	r2, r3
 80007b0:	d115      	bne.n	80007de <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 80007b2:	68aa      	ldr	r2, [r5, #8]
 80007b4:	497d      	ldr	r1, [pc, #500]	; (80009ac <HAL_ADC_Init+0x224>)
 80007b6:	400a      	ands	r2, r1
 80007b8:	4313      	orrs	r3, r2
 80007ba:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80007bc:	4b7c      	ldr	r3, [pc, #496]	; (80009b0 <HAL_ADC_Init+0x228>)
 80007be:	497d      	ldr	r1, [pc, #500]	; (80009b4 <HAL_ADC_Init+0x22c>)
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f7ff fc9d 	bl	8000100 <__udivsi3>
 80007c6:	3001      	adds	r0, #1
 80007c8:	0040      	lsls	r0, r0, #1
 80007ca:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80007cc:	9b01      	ldr	r3, [sp, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d005      	beq.n	80007de <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80007d8:	9b01      	ldr	r3, [sp, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f9      	bne.n	80007d2 <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80007de:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e0:	2000      	movs	r0, #0
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	d400      	bmi.n	80007e8 <HAL_ADC_Init+0x60>
 80007e6:	e07a      	b.n	80008de <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80007e8:	68ab      	ldr	r3, [r5, #8]
 80007ea:	075b      	lsls	r3, r3, #29
 80007ec:	d50b      	bpl.n	8000806 <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80007ee:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f0:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 80007f2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80007f6:	4313      	orrs	r3, r2
 80007f8:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 80007fa:	b002      	add	sp, #8
 80007fc:	bce0      	pop	{r5, r6, r7}
 80007fe:	46ba      	mov	sl, r7
 8000800:	46b1      	mov	r9, r6
 8000802:	46a8      	mov	r8, r5
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000808:	06db      	lsls	r3, r3, #27
 800080a:	d4f1      	bmi.n	80007f0 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 800080c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800080e:	4a6a      	ldr	r2, [pc, #424]	; (80009b8 <HAL_ADC_Init+0x230>)
 8000810:	4013      	ands	r3, r2
 8000812:	3206      	adds	r2, #6
 8000814:	32ff      	adds	r2, #255	; 0xff
 8000816:	4313      	orrs	r3, r2
 8000818:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800081a:	68ab      	ldr	r3, [r5, #8]
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	d471      	bmi.n	8000904 <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000820:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000822:	68a2      	ldr	r2, [r4, #8]
 8000824:	1e7b      	subs	r3, r7, #1
 8000826:	419f      	sbcs	r7, r3
 8000828:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800082a:	7ea6      	ldrb	r6, [r4, #26]
 800082c:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800082e:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000830:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000832:	039b      	lsls	r3, r3, #14
 8000834:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000836:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000838:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800083a:	03db      	lsls	r3, r3, #15
 800083c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800083e:	0373      	lsls	r3, r6, #13
 8000840:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000842:	2900      	cmp	r1, #0
 8000844:	da00      	bge.n	8000848 <HAL_ADC_Init+0xc0>
 8000846:	e09f      	b.n	8000988 <HAL_ADC_Init+0x200>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	039b      	lsls	r3, r3, #14
 800084c:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800084e:	232c      	movs	r3, #44	; 0x2c
 8000850:	5ce3      	ldrb	r3, [r4, r3]
 8000852:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000854:	4313      	orrs	r3, r2
 8000856:	433b      	orrs	r3, r7
 8000858:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800085a:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800085c:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800085e:	5de2      	ldrb	r2, [r4, r7]
 8000860:	2a01      	cmp	r2, #1
 8000862:	d100      	bne.n	8000866 <HAL_ADC_Init+0xde>
 8000864:	e094      	b.n	8000990 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000868:	2a00      	cmp	r2, #0
 800086a:	d005      	beq.n	8000878 <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800086c:	26e0      	movs	r6, #224	; 0xe0
 800086e:	0076      	lsls	r6, r6, #1
 8000870:	4032      	ands	r2, r6
 8000872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000874:	4332      	orrs	r2, r6
 8000876:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8000878:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 800087a:	68ea      	ldr	r2, [r5, #12]
 800087c:	4e4f      	ldr	r6, [pc, #316]	; (80009bc <HAL_ADC_Init+0x234>)
 800087e:	4032      	ands	r2, r6
 8000880:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000882:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8000884:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000886:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8000888:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800088a:	0fb3      	lsrs	r3, r6, #30
 800088c:	079b      	lsls	r3, r3, #30
 800088e:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8000890:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000892:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8000894:	2f01      	cmp	r7, #1
 8000896:	d109      	bne.n	80008ac <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000898:	6c67      	ldr	r7, [r4, #68]	; 0x44
 800089a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800089c:	433b      	orrs	r3, r7
 800089e:	431a      	orrs	r2, r3
 80008a0:	4653      	mov	r3, sl
 80008a2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80008a4:	433a      	orrs	r2, r7
 80008a6:	431a      	orrs	r2, r3
 80008a8:	4663      	mov	r3, ip
 80008aa:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80008ac:	692b      	ldr	r3, [r5, #16]
 80008ae:	4f44      	ldr	r7, [pc, #272]	; (80009c0 <HAL_ADC_Init+0x238>)
 80008b0:	403b      	ands	r3, r7
 80008b2:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80008b4:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80008b6:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80008b8:	0073      	lsls	r3, r6, #1
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	05d2      	lsls	r2, r2, #23
 80008be:	4293      	cmp	r3, r2
 80008c0:	d021      	beq.n	8000906 <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	061b      	lsls	r3, r3, #24
 80008c6:	429e      	cmp	r6, r3
 80008c8:	d01d      	beq.n	8000906 <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 80008ca:	4a3e      	ldr	r2, [pc, #248]	; (80009c4 <HAL_ADC_Init+0x23c>)
 80008cc:	4f3e      	ldr	r7, [pc, #248]	; (80009c8 <HAL_ADC_Init+0x240>)
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	403b      	ands	r3, r7
 80008d2:	27f0      	movs	r7, #240	; 0xf0
 80008d4:	03bf      	lsls	r7, r7, #14
 80008d6:	403e      	ands	r6, r7
 80008d8:	4333      	orrs	r3, r6
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	e013      	b.n	8000906 <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008de:	2210      	movs	r2, #16
 80008e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80008e2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e4:	4313      	orrs	r3, r2
 80008e6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80008ea:	3a0f      	subs	r2, #15
 80008ec:	4313      	orrs	r3, r2
 80008ee:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80008f0:	68ab      	ldr	r3, [r5, #8]
 80008f2:	075b      	lsls	r3, r3, #29
 80008f4:	d587      	bpl.n	8000806 <HAL_ADC_Init+0x7e>
 80008f6:	e77a      	b.n	80007ee <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 80008f8:	f7ff fcd0 	bl	800029c <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 80008fc:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80008fe:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000900:	54e5      	strb	r5, [r4, r3]
 8000902:	e750      	b.n	80007a6 <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000904:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8000906:	2607      	movs	r6, #7
 8000908:	2770      	movs	r7, #112	; 0x70
 800090a:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800090c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800090e:	43b3      	bics	r3, r6
 8000910:	4313      	orrs	r3, r2
 8000912:	616b      	str	r3, [r5, #20]
 8000914:	696e      	ldr	r6, [r5, #20]
 8000916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000918:	43be      	bics	r6, r7
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4333      	orrs	r3, r6
 800091e:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000920:	2900      	cmp	r1, #0
 8000922:	d117      	bne.n	8000954 <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8000924:	2310      	movs	r3, #16
 8000926:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000928:	425b      	negs	r3, r3
 800092a:	430b      	orrs	r3, r1
 800092c:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800092e:	2307      	movs	r3, #7
 8000930:	6969      	ldr	r1, [r5, #20]
 8000932:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000934:	429a      	cmp	r2, r3
 8000936:	d01e      	beq.n	8000976 <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 8000938:	2212      	movs	r2, #18
 800093a:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 800093c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800093e:	4393      	bics	r3, r2
 8000940:	3a02      	subs	r2, #2
 8000942:	4313      	orrs	r3, r2
 8000944:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000946:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000948:	3a0f      	subs	r2, #15
 800094a:	4313      	orrs	r3, r2
 800094c:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 800094e:	e754      	b.n	80007fa <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8000950:	2001      	movs	r0, #1
 8000952:	e752      	b.n	80007fa <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	039b      	lsls	r3, r3, #14
 8000958:	4299      	cmp	r1, r3
 800095a:	d1e8      	bne.n	800092e <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 800095c:	211c      	movs	r1, #28
 800095e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000960:	69e3      	ldr	r3, [r4, #28]
 8000962:	3b01      	subs	r3, #1
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4019      	ands	r1, r3
 8000968:	2310      	movs	r3, #16
 800096a:	425b      	negs	r3, r3
 800096c:	408b      	lsls	r3, r1
 800096e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000970:	430b      	orrs	r3, r1
 8000972:	62ab      	str	r3, [r5, #40]	; 0x28
 8000974:	e7db      	b.n	800092e <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 8000976:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000978:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800097a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800097c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800097e:	4393      	bics	r3, r2
 8000980:	3a02      	subs	r2, #2
 8000982:	4313      	orrs	r3, r2
 8000984:	65a3      	str	r3, [r4, #88]	; 0x58
 8000986:	e738      	b.n	80007fa <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000988:	004b      	lsls	r3, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	469c      	mov	ip, r3
 800098e:	e75e      	b.n	800084e <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000990:	2e00      	cmp	r6, #0
 8000992:	d103      	bne.n	800099c <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	0252      	lsls	r2, r2, #9
 8000998:	4313      	orrs	r3, r2
 800099a:	e764      	b.n	8000866 <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800099e:	433e      	orrs	r6, r7
 80009a0:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a2:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80009a4:	4332      	orrs	r2, r6
 80009a6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80009a8:	e75d      	b.n	8000866 <HAL_ADC_Init+0xde>
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	6fffffe8 	.word	0x6fffffe8
 80009b0:	20000000 	.word	0x20000000
 80009b4:	00030d40 	.word	0x00030d40
 80009b8:	fffffefd 	.word	0xfffffefd
 80009bc:	fffe0201 	.word	0xfffe0201
 80009c0:	1ffffc02 	.word	0x1ffffc02
 80009c4:	40012708 	.word	0x40012708
 80009c8:	ffc3ffff 	.word	0xffc3ffff

080009cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80009ce:	6944      	ldr	r4, [r0, #20]
{
 80009d0:	0006      	movs	r6, r0
 80009d2:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80009d4:	2c08      	cmp	r4, #8
 80009d6:	d004      	beq.n	80009e2 <HAL_ADC_PollForConversion+0x16>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80009d8:	6803      	ldr	r3, [r0, #0]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80009da:	2404      	movs	r4, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	07db      	lsls	r3, r3, #31
 80009e0:	d447      	bmi.n	8000a72 <HAL_ADC_PollForConversion+0xa6>
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80009e2:	f7ff fecb 	bl	800077c <HAL_GetTick>
 80009e6:	6832      	ldr	r2, [r6, #0]
 80009e8:	0007      	movs	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80009ea:	e001      	b.n	80009f0 <HAL_ADC_PollForConversion+0x24>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80009ec:	1c6b      	adds	r3, r5, #1
 80009ee:	d122      	bne.n	8000a36 <HAL_ADC_PollForConversion+0x6a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	421c      	tst	r4, r3
 80009f4:	d0fa      	beq.n	80009ec <HAL_ADC_PollForConversion+0x20>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	6db1      	ldr	r1, [r6, #88]	; 0x58
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	430b      	orrs	r3, r1
 80009fe:	65b3      	str	r3, [r6, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a00:	23c0      	movs	r3, #192	; 0xc0
 8000a02:	68d1      	ldr	r1, [r2, #12]
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	4219      	tst	r1, r3
 8000a08:	d110      	bne.n	8000a2c <HAL_ADC_PollForConversion+0x60>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000a0a:	7eb3      	ldrb	r3, [r6, #26]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10d      	bne.n	8000a2c <HAL_ADC_PollForConversion+0x60>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	071b      	lsls	r3, r3, #28
 8000a14:	d50a      	bpl.n	8000a2c <HAL_ADC_PollForConversion+0x60>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a16:	6893      	ldr	r3, [r2, #8]
 8000a18:	075b      	lsls	r3, r3, #29
 8000a1a:	d530      	bpl.n	8000a7e <HAL_ADC_PollForConversion+0xb2>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000a20:	430b      	orrs	r3, r1
 8000a22:	65b3      	str	r3, [r6, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a24:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8000a26:	391f      	subs	r1, #31
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	65f3      	str	r3, [r6, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000a2c:	7e30      	ldrb	r0, [r6, #24]
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d014      	beq.n	8000a5c <HAL_ADC_PollForConversion+0x90>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2000      	movs	r0, #0
}
 8000a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000a36:	f7ff fea1 	bl	800077c <HAL_GetTick>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000a3a:	6832      	ldr	r2, [r6, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	42a8      	cmp	r0, r5
 8000a40:	d90f      	bls.n	8000a62 <HAL_ADC_PollForConversion+0x96>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000a42:	0021      	movs	r1, r4
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	4019      	ands	r1, r3
 8000a48:	421c      	tst	r4, r3
 8000a4a:	d1d1      	bne.n	80009f0 <HAL_ADC_PollForConversion+0x24>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	6db3      	ldr	r3, [r6, #88]	; 0x58
          return HAL_TIMEOUT;
 8000a50:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a52:	4313      	orrs	r3, r2
 8000a54:	65b3      	str	r3, [r6, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8000a56:	2354      	movs	r3, #84	; 0x54
 8000a58:	54f1      	strb	r1, [r6, r3]
          return HAL_TIMEOUT;
 8000a5a:	e7eb      	b.n	8000a34 <HAL_ADC_PollForConversion+0x68>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e7e8      	b.n	8000a34 <HAL_ADC_PollForConversion+0x68>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d1c4      	bne.n	80009f0 <HAL_ADC_PollForConversion+0x24>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000a66:	0021      	movs	r1, r4
 8000a68:	6813      	ldr	r3, [r2, #0]
 8000a6a:	4019      	ands	r1, r3
 8000a6c:	421c      	tst	r4, r3
 8000a6e:	d1bf      	bne.n	80009f0 <HAL_ADC_PollForConversion+0x24>
 8000a70:	e7ec      	b.n	8000a4c <HAL_ADC_PollForConversion+0x80>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a72:	2220      	movs	r2, #32
 8000a74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000a76:	4313      	orrs	r3, r2
 8000a78:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	e7da      	b.n	8000a34 <HAL_ADC_PollForConversion+0x68>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000a7e:	210c      	movs	r1, #12
 8000a80:	6853      	ldr	r3, [r2, #4]
 8000a82:	438b      	bics	r3, r1
 8000a84:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000a86:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000a88:	4903      	ldr	r1, [pc, #12]	; (8000a98 <HAL_ADC_PollForConversion+0xcc>)
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	3104      	adds	r1, #4
 8000a8e:	31ff      	adds	r1, #255	; 0xff
 8000a90:	430b      	orrs	r3, r1
 8000a92:	65b3      	str	r3, [r6, #88]	; 0x58
 8000a94:	e7ca      	b.n	8000a2c <HAL_ADC_PollForConversion+0x60>
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	fffffefe 	.word	0xfffffefe

08000a9c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000a9c:	6803      	ldr	r3, [r0, #0]
 8000a9e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)

08000aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	4645      	mov	r5, r8
 8000aa8:	46de      	mov	lr, fp
 8000aaa:	4657      	mov	r7, sl
 8000aac:	464e      	mov	r6, r9
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000aae:	2300      	movs	r3, #0
{
 8000ab0:	b5e0      	push	{r5, r6, r7, lr}
 8000ab2:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8000ab4:	9303      	str	r3, [sp, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000ab6:	3354      	adds	r3, #84	; 0x54
 8000ab8:	5cc2      	ldrb	r2, [r0, r3]
{
 8000aba:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000abc:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8000abe:	2a01      	cmp	r2, #1
 8000ac0:	d100      	bne.n	8000ac4 <HAL_ADC_ConfigChannel+0x20>
 8000ac2:	e091      	b.n	8000be8 <HAL_ADC_ConfigChannel+0x144>
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	54e0      	strb	r0, [r4, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	689e      	ldr	r6, [r3, #8]
 8000ace:	4232      	tst	r2, r6
 8000ad0:	d00d      	beq.n	8000aee <HAL_ADC_ConfigChannel+0x4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ad4:	321c      	adds	r2, #28
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8000ada:	2354      	movs	r3, #84	; 0x54
 8000adc:	2200      	movs	r2, #0
 8000ade:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8000ae0:	b005      	add	sp, #20
 8000ae2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae4:	46bb      	mov	fp, r7
 8000ae6:	46b2      	mov	sl, r6
 8000ae8:	46a9      	mov	r9, r5
 8000aea:	46a0      	mov	r8, r4
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8000aee:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000af0:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8000af2:	2e02      	cmp	r6, #2
 8000af4:	d05c      	beq.n	8000bb0 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000af6:	2780      	movs	r7, #128	; 0x80
 8000af8:	063f      	lsls	r7, r7, #24
 8000afa:	42bd      	cmp	r5, r7
 8000afc:	d051      	beq.n	8000ba2 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000afe:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8000b00:	270f      	movs	r7, #15
 8000b02:	46aa      	mov	sl, r5
 8000b04:	251f      	movs	r5, #31
 8000b06:	46ac      	mov	ip, r5
 8000b08:	4035      	ands	r5, r6
 8000b0a:	40af      	lsls	r7, r5
 8000b0c:	46a9      	mov	r9, r5
 8000b0e:	43fd      	mvns	r5, r7
 8000b10:	9500      	str	r5, [sp, #0]
 8000b12:	4655      	mov	r5, sl
 8000b14:	43bd      	bics	r5, r7
 8000b16:	46a8      	mov	r8, r5
 8000b18:	680d      	ldr	r5, [r1, #0]
 8000b1a:	9701      	str	r7, [sp, #4]
 8000b1c:	036f      	lsls	r7, r5, #13
 8000b1e:	d16c      	bne.n	8000bfa <HAL_ADC_ConfigChannel+0x156>
 8000b20:	4660      	mov	r0, ip
 8000b22:	0eaa      	lsrs	r2, r5, #26
 8000b24:	4010      	ands	r0, r2
 8000b26:	0002      	movs	r2, r0
 8000b28:	4648      	mov	r0, r9
 8000b2a:	4082      	lsls	r2, r0
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	4310      	orrs	r0, r2
 8000b30:	4680      	mov	r8, r0
 8000b32:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000b34:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000b36:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000b38:	69e2      	ldr	r2, [r4, #28]
 8000b3a:	3601      	adds	r6, #1
 8000b3c:	4296      	cmp	r6, r2
 8000b3e:	d808      	bhi.n	8000b52 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8000b40:	464e      	mov	r6, r9
 8000b42:	00aa      	lsls	r2, r5, #2
 8000b44:	0f12      	lsrs	r2, r2, #28
 8000b46:	40b2      	lsls	r2, r6
 8000b48:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b4a:	9e00      	ldr	r6, [sp, #0]
 8000b4c:	4030      	ands	r0, r6
 8000b4e:	4302      	orrs	r2, r0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8000b52:	0228      	lsls	r0, r5, #8
 8000b54:	688a      	ldr	r2, [r1, #8]
 8000b56:	0001      	movs	r1, r0
 8000b58:	695e      	ldr	r6, [r3, #20]
 8000b5a:	4002      	ands	r2, r0
 8000b5c:	4866      	ldr	r0, [pc, #408]	; (8000cf8 <HAL_ADC_ConfigChannel+0x254>)
 8000b5e:	438e      	bics	r6, r1
 8000b60:	4002      	ands	r2, r0
 8000b62:	4332      	orrs	r2, r6
 8000b64:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	db01      	blt.n	8000b6e <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6a:	2000      	movs	r0, #0
}
 8000b6c:	e7b5      	b.n	8000ada <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b6e:	21e0      	movs	r1, #224	; 0xe0
 8000b70:	4862      	ldr	r0, [pc, #392]	; (8000cfc <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000b72:	4a63      	ldr	r2, [pc, #396]	; (8000d00 <HAL_ADC_ConfigChannel+0x25c>)
 8000b74:	6803      	ldr	r3, [r0, #0]
 8000b76:	0449      	lsls	r1, r1, #17
 8000b78:	4019      	ands	r1, r3
 8000b7a:	4295      	cmp	r5, r2
 8000b7c:	d051      	beq.n	8000c22 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8000b7e:	4a61      	ldr	r2, [pc, #388]	; (8000d04 <HAL_ADC_ConfigChannel+0x260>)
 8000b80:	4295      	cmp	r5, r2
 8000b82:	d045      	beq.n	8000c10 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000b84:	4a60      	ldr	r2, [pc, #384]	; (8000d08 <HAL_ADC_ConfigChannel+0x264>)
 8000b86:	4295      	cmp	r5, r2
 8000b88:	d1ef      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8000b8e:	4213      	tst	r3, r2
 8000b90:	d1eb      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	4d5d      	ldr	r5, [pc, #372]	; (8000d0c <HAL_ADC_ConfigChannel+0x268>)
 8000b96:	402b      	ands	r3, r5
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9e:	2000      	movs	r0, #0
}
 8000ba0:	e79b      	b.n	8000ada <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000ba2:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ba4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ba6:	036a      	lsls	r2, r5, #13
 8000ba8:	0b52      	lsrs	r2, r2, #13
 8000baa:	4302      	orrs	r2, r0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bae:	e7d0      	b.n	8000b52 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	0612      	lsls	r2, r2, #24
 8000bb4:	4295      	cmp	r5, r2
 8000bb6:	d019      	beq.n	8000bec <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000bb8:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	dad5      	bge.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bbe:	494f      	ldr	r1, [pc, #316]	; (8000cfc <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bc0:	484f      	ldr	r0, [pc, #316]	; (8000d00 <HAL_ADC_ConfigChannel+0x25c>)
 8000bc2:	680b      	ldr	r3, [r1, #0]
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	d029      	beq.n	8000c1c <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8000bc8:	484e      	ldr	r0, [pc, #312]	; (8000d04 <HAL_ADC_ConfigChannel+0x260>)
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	d04c      	beq.n	8000c68 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8000bce:	484e      	ldr	r0, [pc, #312]	; (8000d08 <HAL_ADC_ConfigChannel+0x264>)
 8000bd0:	4282      	cmp	r2, r0
 8000bd2:	d1ca      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000bd4:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bd6:	680a      	ldr	r2, [r1, #0]
 8000bd8:	0440      	lsls	r0, r0, #17
 8000bda:	4003      	ands	r3, r0
 8000bdc:	484b      	ldr	r0, [pc, #300]	; (8000d0c <HAL_ADC_ConfigChannel+0x268>)
 8000bde:	4002      	ands	r2, r0
 8000be0:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be2:	2000      	movs	r0, #0
 8000be4:	600b      	str	r3, [r1, #0]
 8000be6:	e778      	b.n	8000ada <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8000be8:	2002      	movs	r0, #2
 8000bea:	e779      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8000bec:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000bee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000bf0:	0350      	lsls	r0, r2, #13
 8000bf2:	0b40      	lsrs	r0, r0, #13
 8000bf4:	4381      	bics	r1, r0
 8000bf6:	6299      	str	r1, [r3, #40]	; 0x28
}
 8000bf8:	e7df      	b.n	8000bba <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000bfa:	4228      	tst	r0, r5
 8000bfc:	d199      	bne.n	8000b32 <HAL_ADC_ConfigChannel+0x8e>
 8000bfe:	2702      	movs	r7, #2
 8000c00:	422f      	tst	r7, r5
 8000c02:	d02d      	beq.n	8000c60 <HAL_ADC_ConfigChannel+0x1bc>
 8000c04:	464a      	mov	r2, r9
 8000c06:	4090      	lsls	r0, r2
 8000c08:	4642      	mov	r2, r8
 8000c0a:	4302      	orrs	r2, r0
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	e790      	b.n	8000b32 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	0452      	lsls	r2, r2, #17
 8000c14:	4213      	tst	r3, r2
 8000c16:	d0bc      	beq.n	8000b92 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e75e      	b.n	8000ada <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000c1c:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c1e:	680a      	ldr	r2, [r1, #0]
 8000c20:	e7da      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c26:	4213      	tst	r3, r2
 8000c28:	d19f      	bne.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	4d37      	ldr	r5, [pc, #220]	; (8000d0c <HAL_ADC_ConfigChannel+0x268>)
 8000c2e:	402b      	ands	r3, r5
 8000c30:	430b      	orrs	r3, r1
 8000c32:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_ADC_ConfigChannel+0x26c>)
 8000c36:	6002      	str	r2, [r0, #0]
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	4936      	ldr	r1, [pc, #216]	; (8000d14 <HAL_ADC_ConfigChannel+0x270>)
 8000c3c:	f7ff fa60 	bl	8000100 <__udivsi3>
 8000c40:	3001      	adds	r0, #1
 8000c42:	0043      	lsls	r3, r0, #1
 8000c44:	181b      	adds	r3, r3, r0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8000c4a:	9b03      	ldr	r3, [sp, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d08c      	beq.n	8000b6a <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8000c50:	9b03      	ldr	r3, [sp, #12]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8000c56:	9b03      	ldr	r3, [sp, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f9      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e73c      	b.n	8000ada <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000c60:	422a      	tst	r2, r5
 8000c62:	d005      	beq.n	8000c70 <HAL_ADC_ConfigChannel+0x1cc>
 8000c64:	003a      	movs	r2, r7
 8000c66:	e75f      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000c68:	20c0      	movs	r0, #192	; 0xc0
 8000c6a:	680a      	ldr	r2, [r1, #0]
 8000c6c:	0400      	lsls	r0, r0, #16
 8000c6e:	e7b4      	b.n	8000bda <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000c70:	072a      	lsls	r2, r5, #28
 8000c72:	d501      	bpl.n	8000c78 <HAL_ADC_ConfigChannel+0x1d4>
 8000c74:	2203      	movs	r2, #3
 8000c76:	e757      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000c78:	06ea      	lsls	r2, r5, #27
 8000c7a:	d501      	bpl.n	8000c80 <HAL_ADC_ConfigChannel+0x1dc>
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	e753      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000c80:	06aa      	lsls	r2, r5, #26
 8000c82:	d501      	bpl.n	8000c88 <HAL_ADC_ConfigChannel+0x1e4>
 8000c84:	2205      	movs	r2, #5
 8000c86:	e74f      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000c88:	066a      	lsls	r2, r5, #25
 8000c8a:	d501      	bpl.n	8000c90 <HAL_ADC_ConfigChannel+0x1ec>
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	e74b      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000c90:	062a      	lsls	r2, r5, #24
 8000c92:	d501      	bpl.n	8000c98 <HAL_ADC_ConfigChannel+0x1f4>
 8000c94:	2207      	movs	r2, #7
 8000c96:	e747      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000c98:	05ea      	lsls	r2, r5, #23
 8000c9a:	d501      	bpl.n	8000ca0 <HAL_ADC_ConfigChannel+0x1fc>
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	e743      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000ca0:	05aa      	lsls	r2, r5, #22
 8000ca2:	d501      	bpl.n	8000ca8 <HAL_ADC_ConfigChannel+0x204>
 8000ca4:	2209      	movs	r2, #9
 8000ca6:	e73f      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000ca8:	056a      	lsls	r2, r5, #21
 8000caa:	d501      	bpl.n	8000cb0 <HAL_ADC_ConfigChannel+0x20c>
 8000cac:	220a      	movs	r2, #10
 8000cae:	e73b      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cb0:	052a      	lsls	r2, r5, #20
 8000cb2:	d501      	bpl.n	8000cb8 <HAL_ADC_ConfigChannel+0x214>
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	e737      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cb8:	04ea      	lsls	r2, r5, #19
 8000cba:	d501      	bpl.n	8000cc0 <HAL_ADC_ConfigChannel+0x21c>
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	e733      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cc0:	04aa      	lsls	r2, r5, #18
 8000cc2:	d501      	bpl.n	8000cc8 <HAL_ADC_ConfigChannel+0x224>
 8000cc4:	220d      	movs	r2, #13
 8000cc6:	e72f      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cc8:	046a      	lsls	r2, r5, #17
 8000cca:	d501      	bpl.n	8000cd0 <HAL_ADC_ConfigChannel+0x22c>
 8000ccc:	220e      	movs	r2, #14
 8000cce:	e72b      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cd0:	042a      	lsls	r2, r5, #16
 8000cd2:	d504      	bpl.n	8000cde <HAL_ADC_ConfigChannel+0x23a>
 8000cd4:	4652      	mov	r2, sl
 8000cd6:	9801      	ldr	r0, [sp, #4]
 8000cd8:	4302      	orrs	r2, r0
 8000cda:	4690      	mov	r8, r2
 8000cdc:	e729      	b.n	8000b32 <HAL_ADC_ConfigChannel+0x8e>
 8000cde:	03ea      	lsls	r2, r5, #15
 8000ce0:	d501      	bpl.n	8000ce6 <HAL_ADC_ConfigChannel+0x242>
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	e720      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000ce6:	03aa      	lsls	r2, r5, #14
 8000ce8:	d501      	bpl.n	8000cee <HAL_ADC_ConfigChannel+0x24a>
 8000cea:	2211      	movs	r2, #17
 8000cec:	e71c      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cee:	036a      	lsls	r2, r5, #13
 8000cf0:	d400      	bmi.n	8000cf4 <HAL_ADC_ConfigChannel+0x250>
 8000cf2:	e71e      	b.n	8000b32 <HAL_ADC_ConfigChannel+0x8e>
 8000cf4:	2212      	movs	r2, #18
 8000cf6:	e717      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x84>
 8000cf8:	07ffff00 	.word	0x07ffff00
 8000cfc:	40012708 	.word	0x40012708
 8000d00:	b0001000 	.word	0xb0001000
 8000d04:	b8004000 	.word	0xb8004000
 8000d08:	b4002000 	.word	0xb4002000
 8000d0c:	fe3fffff 	.word	0xfe3fffff
 8000d10:	20000000 	.word	0x20000000
 8000d14:	00030d40 	.word	0x00030d40

08000d18 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8000d18:	6802      	ldr	r2, [r0, #0]
{
 8000d1a:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d1c:	6893      	ldr	r3, [r2, #8]
 8000d1e:	0004      	movs	r4, r0
 8000d20:	075b      	lsls	r3, r3, #29
 8000d22:	d516      	bpl.n	8000d52 <ADC_ConversionStop+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000d24:	6893      	ldr	r3, [r2, #8]
 8000d26:	079b      	lsls	r3, r3, #30
 8000d28:	d515      	bpl.n	8000d56 <ADC_ConversionStop+0x3e>
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d2a:	f7ff fd27 	bl	800077c <HAL_GetTick>

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d2e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000d30:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	075b      	lsls	r3, r3, #29
 8000d36:	d50c      	bpl.n	8000d52 <ADC_ConversionStop+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d38:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000d3a:	f7ff fd1f 	bl	800077c <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d3e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d902      	bls.n	8000d4c <ADC_ConversionStop+0x34>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	4215      	tst	r5, r2
 8000d4a:	d112      	bne.n	8000d72 <ADC_ConversionStop+0x5a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	421d      	tst	r5, r3
 8000d50:	d1f3      	bne.n	8000d3a <ADC_ConversionStop+0x22>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000d56:	6893      	ldr	r3, [r2, #8]
 8000d58:	490b      	ldr	r1, [pc, #44]	; (8000d88 <ADC_ConversionStop+0x70>)
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000d62:	f7ff fd0b 	bl	800077c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d66:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000d68:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	075b      	lsls	r3, r3, #29
 8000d6e:	d4e3      	bmi.n	8000d38 <ADC_ConversionStop+0x20>
 8000d70:	e7ef      	b.n	8000d52 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d72:	2210      	movs	r2, #16
 8000d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000d7e:	3a0f      	subs	r2, #15
 8000d80:	4313      	orrs	r3, r2
 8000d82:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8000d84:	e7e6      	b.n	8000d54 <ADC_ConversionStop+0x3c>
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	7fffffe8 	.word	0x7fffffe8

08000d8c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8000d8c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d8e:	2201      	movs	r2, #1
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d92:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8000d94:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d96:	6803      	ldr	r3, [r0, #0]
{
 8000d98:	0004      	movs	r4, r0
 8000d9a:	6899      	ldr	r1, [r3, #8]
 8000d9c:	420a      	tst	r2, r1
 8000d9e:	d11f      	bne.n	8000de0 <ADC_Enable+0x54>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000da0:	6898      	ldr	r0, [r3, #8]
 8000da2:	4928      	ldr	r1, [pc, #160]	; (8000e44 <ADC_Enable+0xb8>)
 8000da4:	4208      	tst	r0, r1
 8000da6:	d11e      	bne.n	8000de6 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8000da8:	6899      	ldr	r1, [r3, #8]
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <ADC_Enable+0xbc>)
 8000dac:	4001      	ands	r1, r0
 8000dae:	430a      	orrs	r2, r1
 8000db0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <ADC_Enable+0xc0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	d50f      	bpl.n	8000dda <ADC_Enable+0x4e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <ADC_Enable+0xc4>)
 8000dbc:	4925      	ldr	r1, [pc, #148]	; (8000e54 <ADC_Enable+0xc8>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	f7ff f99e 	bl	8000100 <__udivsi3>
 8000dc4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8000dc6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8000dc8:	9b01      	ldr	r3, [sp, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <ADC_Enable+0x4e>
      {
        wait_loop_index--;
 8000dce:	9b01      	ldr	r3, [sp, #4]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8000dd4:	9b01      	ldr	r3, [sp, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f9      	bne.n	8000dce <ADC_Enable+0x42>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000dda:	7e63      	ldrb	r3, [r4, #25]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d10b      	bne.n	8000df8 <ADC_Enable+0x6c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000de0:	2000      	movs	r0, #0
}
 8000de2:	b003      	add	sp, #12
 8000de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de6:	2110      	movs	r1, #16
 8000de8:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dec:	430b      	orrs	r3, r1
 8000dee:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000df2:	4313      	orrs	r3, r2
 8000df4:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8000df6:	e7f4      	b.n	8000de2 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8000df8:	f7ff fcc0 	bl	800077c <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000dfc:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000dfe:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	07d2      	lsls	r2, r2, #31
 8000e04:	d4ec      	bmi.n	8000de0 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e06:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8000e08:	4f0f      	ldr	r7, [pc, #60]	; (8000e48 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	4215      	tst	r5, r2
 8000e0e:	d103      	bne.n	8000e18 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	403a      	ands	r2, r7
 8000e14:	432a      	orrs	r2, r5
 8000e16:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e18:	f7ff fcb0 	bl	800077c <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e1c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e1e:	1b80      	subs	r0, r0, r6
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d902      	bls.n	8000e2a <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4215      	tst	r5, r2
 8000e28:	d003      	beq.n	8000e32 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4215      	tst	r5, r2
 8000e2e:	d0ec      	beq.n	8000e0a <ADC_Enable+0x7e>
 8000e30:	e7d6      	b.n	8000de0 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e32:	2210      	movs	r2, #16
 8000e34:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000e3e:	432b      	orrs	r3, r5
 8000e40:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8000e42:	e7ce      	b.n	8000de2 <ADC_Enable+0x56>
 8000e44:	80000017 	.word	0x80000017
 8000e48:	7fffffe8 	.word	0x7fffffe8
 8000e4c:	40012708 	.word	0x40012708
 8000e50:	20000000 	.word	0x20000000
 8000e54:	00030d40 	.word	0x00030d40

08000e58 <HAL_ADC_Start>:
{
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e5a:	2504      	movs	r5, #4
 8000e5c:	002f      	movs	r7, r5
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e5e:	6803      	ldr	r3, [r0, #0]
{
 8000e60:	0004      	movs	r4, r0
 8000e62:	689b      	ldr	r3, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 8000e64:	2002      	movs	r0, #2
 8000e66:	401f      	ands	r7, r3
 8000e68:	421d      	tst	r5, r3
 8000e6a:	d11b      	bne.n	8000ea4 <HAL_ADC_Start+0x4c>
    __HAL_LOCK(hadc);
 8000e6c:	2654      	movs	r6, #84	; 0x54
 8000e6e:	5da3      	ldrb	r3, [r4, r6]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d017      	beq.n	8000ea4 <HAL_ADC_Start+0x4c>
 8000e74:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000e76:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8000e78:	55a3      	strb	r3, [r4, r6]
    tmp_hal_status = ADC_Enable(hadc);
 8000e7a:	f7ff ff87 	bl	8000d8c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d111      	bne.n	8000ea6 <HAL_ADC_Start+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 8000e82:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 8000e86:	490a      	ldr	r1, [pc, #40]	; (8000eb0 <HAL_ADC_Start+0x58>)
 8000e88:	401a      	ands	r2, r3
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e92:	231c      	movs	r3, #28
 8000e94:	6822      	ldr	r2, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e98:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8000e9a:	55a0      	strb	r0, [r4, r6]
 8000e9c:	6893      	ldr	r3, [r2, #8]
 8000e9e:	400b      	ands	r3, r1
 8000ea0:	432b      	orrs	r3, r5
 8000ea2:	6093      	str	r3, [r2, #8]
}
 8000ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 8000ea6:	55a7      	strb	r7, [r4, r6]
 8000ea8:	e7fc      	b.n	8000ea4 <HAL_ADC_Start+0x4c>
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	fffff0fe 	.word	0xfffff0fe
 8000eb0:	7fffffe8 	.word	0x7fffffe8

08000eb4 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000eb4:	2202      	movs	r2, #2
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8000eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8000eb8:	6803      	ldr	r3, [r0, #0]
{
 8000eba:	0004      	movs	r4, r0
 8000ebc:	6899      	ldr	r1, [r3, #8]
 8000ebe:	420a      	tst	r2, r1
 8000ec0:	d002      	beq.n	8000ec8 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ec4:	689b      	ldr	r3, [r3, #8]
}
 8000ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec8:	2101      	movs	r1, #1
 8000eca:	6898      	ldr	r0, [r3, #8]
 8000ecc:	4201      	tst	r1, r0
 8000ece:	d028      	beq.n	8000f22 <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8000ed0:	2705      	movs	r7, #5
 8000ed2:	6898      	ldr	r0, [r3, #8]
 8000ed4:	4007      	ands	r7, r0
 8000ed6:	2f01      	cmp	r7, #1
 8000ed8:	d008      	beq.n	8000eec <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eda:	2210      	movs	r2, #16
 8000edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8000eea:	e7ec      	b.n	8000ec6 <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8000eec:	6899      	ldr	r1, [r3, #8]
 8000eee:	4812      	ldr	r0, [pc, #72]	; (8000f38 <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000ef0:	2501      	movs	r5, #1
 8000ef2:	4001      	ands	r1, r0
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8000ef8:	2203      	movs	r2, #3
 8000efa:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000efc:	f7ff fc3e 	bl	800077c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000f00:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000f02:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	421f      	tst	r7, r3
 8000f08:	d00b      	beq.n	8000f22 <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f0a:	f7ff fc37 	bl	800077c <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000f0e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	2802      	cmp	r0, #2
 8000f14:	d902      	bls.n	8000f1c <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	4215      	tst	r5, r2
 8000f1a:	d104      	bne.n	8000f26 <ADC_Disable+0x72>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	421d      	tst	r5, r3
 8000f20:	d1f3      	bne.n	8000f0a <ADC_Disable+0x56>
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	e7cf      	b.n	8000ec6 <ADC_Disable+0x12>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f26:	2210      	movs	r2, #16
 8000f28:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000f32:	432b      	orrs	r3, r5
 8000f34:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8000f36:	e7c6      	b.n	8000ec6 <ADC_Disable+0x12>
 8000f38:	7fffffe8 	.word	0x7fffffe8

08000f3c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000f3c:	2354      	movs	r3, #84	; 0x54
{
 8000f3e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000f40:	5cc2      	ldrb	r2, [r0, r3]
{
 8000f42:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000f44:	2a01      	cmp	r2, #1
 8000f46:	d014      	beq.n	8000f72 <HAL_ADC_Stop+0x36>
 8000f48:	2501      	movs	r5, #1
 8000f4a:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f4c:	f7ff fee4 	bl	8000d18 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8000f54:	2354      	movs	r3, #84	; 0x54
 8000f56:	2200      	movs	r2, #0
 8000f58:	54e2      	strb	r2, [r4, r3]
}
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000f5c:	0020      	movs	r0, r4
 8000f5e:	f7ff ffa9 	bl	8000eb4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d1f6      	bne.n	8000f54 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8000f66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_ADC_Stop+0x3c>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	432b      	orrs	r3, r5
 8000f6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000f70:	e7f0      	b.n	8000f54 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8000f72:	2002      	movs	r0, #2
 8000f74:	e7f1      	b.n	8000f5a <HAL_ADC_Stop+0x1e>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fffffefe 	.word	0xfffffefe

08000f7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	db14      	blt.n	8000fac <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_NVIC_SetPriority+0x5c>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	469c      	mov	ip, r3
 8000f88:	23ff      	movs	r3, #255	; 0xff
 8000f8a:	0884      	lsrs	r4, r0, #2
 8000f8c:	4002      	ands	r2, r0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	26c0      	movs	r6, #192	; 0xc0
 8000f92:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f94:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f96:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f98:	400b      	ands	r3, r1
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	00a4      	lsls	r4, r4, #2
 8000f9e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa0:	00b6      	lsls	r6, r6, #2
 8000fa2:	59a5      	ldr	r5, [r4, r6]
 8000fa4:	4385      	bics	r5, r0
 8000fa6:	432b      	orrs	r3, r5
 8000fa8:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_NVIC_SetPriority+0x60>)
 8000fae:	230f      	movs	r3, #15
 8000fb0:	4694      	mov	ip, r2
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4003      	ands	r3, r0
 8000fb6:	4010      	ands	r0, r2
 8000fb8:	32fc      	adds	r2, #252	; 0xfc
 8000fba:	0015      	movs	r5, r2
 8000fbc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc6:	3b08      	subs	r3, #8
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4463      	add	r3, ip
 8000fce:	69dc      	ldr	r4, [r3, #28]
 8000fd0:	43ac      	bics	r4, r5
 8000fd2:	4322      	orrs	r2, r4
 8000fd4:	61da      	str	r2, [r3, #28]
 8000fd6:	e7e8      	b.n	8000faa <HAL_NVIC_SetPriority+0x2e>
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	1e43      	subs	r3, r0, #1
 8000fe4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d20e      	bcs.n	800100a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fec:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	6a03      	ldr	r3, [r0, #32]
 8000ff6:	0609      	lsls	r1, r1, #24
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001002:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	3307      	adds	r3, #7
 8001008:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800100a:	4770      	bx	lr
 800100c:	e000e010 	.word	0xe000e010
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	46de      	mov	lr, fp
 8001018:	4657      	mov	r7, sl
 800101a:	464e      	mov	r6, r9
 800101c:	4645      	mov	r5, r8
 800101e:	b5e0      	push	{r5, r6, r7, lr}
 8001020:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	6809      	ldr	r1, [r1, #0]
 8001024:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001026:	2300      	movs	r3, #0
{
 8001028:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	2900      	cmp	r1, #0
 800102c:	d07a      	beq.n	8001124 <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800102e:	2601      	movs	r6, #1
 8001030:	000c      	movs	r4, r1
 8001032:	409e      	lsls	r6, r3
 8001034:	4034      	ands	r4, r6
 8001036:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 8001038:	4231      	tst	r1, r6
 800103a:	d06d      	beq.n	8001118 <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	465c      	mov	r4, fp
 800103e:	2503      	movs	r5, #3
 8001040:	6864      	ldr	r4, [r4, #4]
 8001042:	4025      	ands	r5, r4
 8001044:	46ac      	mov	ip, r5
 8001046:	3d01      	subs	r5, #1
 8001048:	2d01      	cmp	r5, #1
 800104a:	d800      	bhi.n	800104e <HAL_GPIO_Init+0x3a>
 800104c:	e071      	b.n	8001132 <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	4665      	mov	r5, ip
 8001050:	2d03      	cmp	r5, #3
 8001052:	d000      	beq.n	8001056 <HAL_GPIO_Init+0x42>
 8001054:	e0b4      	b.n	80011c0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001056:	4666      	mov	r6, ip
 8001058:	4096      	lsls	r6, r2
 800105a:	43f5      	mvns	r5, r6
 800105c:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	9d00      	ldr	r5, [sp, #0]
 8001062:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001064:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001066:	25c0      	movs	r5, #192	; 0xc0
 8001068:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 800106a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106c:	422c      	tst	r4, r5
 800106e:	d053      	beq.n	8001118 <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001070:	4e67      	ldr	r6, [pc, #412]	; (8001210 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001072:	2703      	movs	r7, #3
 8001074:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 8001076:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001078:	401f      	ands	r7, r3
 800107a:	00ff      	lsls	r7, r7, #3
 800107c:	00ad      	lsls	r5, r5, #2
 800107e:	4465      	add	r5, ip
 8001080:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 8001082:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001084:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 8001086:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001088:	4666      	mov	r6, ip
 800108a:	40b7      	lsls	r7, r6
 800108c:	003e      	movs	r6, r7
 800108e:	464f      	mov	r7, r9
 8001090:	43b7      	bics	r7, r6
 8001092:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001094:	27a0      	movs	r7, #160	; 0xa0
 8001096:	05ff      	lsls	r7, r7, #23
 8001098:	42b8      	cmp	r0, r7
 800109a:	d012      	beq.n	80010c2 <HAL_GPIO_Init+0xae>
 800109c:	4f5d      	ldr	r7, [pc, #372]	; (8001214 <HAL_GPIO_Init+0x200>)
 800109e:	42b8      	cmp	r0, r7
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x90>
 80010a2:	e0a5      	b.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80010a4:	4f5c      	ldr	r7, [pc, #368]	; (8001218 <HAL_GPIO_Init+0x204>)
 80010a6:	42b8      	cmp	r0, r7
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x98>
 80010aa:	e0a9      	b.n	8001200 <HAL_GPIO_Init+0x1ec>
 80010ac:	4f5b      	ldr	r7, [pc, #364]	; (800121c <HAL_GPIO_Init+0x208>)
 80010ae:	42b8      	cmp	r0, r7
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0xa0>
 80010b2:	e096      	b.n	80011e2 <HAL_GPIO_Init+0x1ce>
 80010b4:	4666      	mov	r6, ip
 80010b6:	2705      	movs	r7, #5
 80010b8:	40b7      	lsls	r7, r6
 80010ba:	003e      	movs	r6, r7
 80010bc:	464f      	mov	r7, r9
 80010be:	4337      	orrs	r7, r6
 80010c0:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80010c2:	464e      	mov	r6, r9
 80010c4:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 80010c6:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c8:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 80010ca:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 80010cc:	4d50      	ldr	r5, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80010d0:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 80010d2:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d4:	423c      	tst	r4, r7
 80010d6:	d000      	beq.n	80010da <HAL_GPIO_Init+0xc6>
 80010d8:	e080      	b.n	80011dc <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 80010da:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010dc:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 80010de:	4e4c      	ldr	r6, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 80010e2:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 80010e4:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e6:	423c      	tst	r4, r7
 80010e8:	d000      	beq.n	80010ec <HAL_GPIO_Init+0xd8>
 80010ea:	e074      	b.n	80011d6 <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 80010ec:	4646      	mov	r6, r8
 80010ee:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80010f0:	4e47      	ldr	r6, [pc, #284]	; (8001210 <HAL_GPIO_Init+0x1fc>)
 80010f2:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f4:	2584      	movs	r5, #132	; 0x84
 80010f6:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f8:	03a7      	lsls	r7, r4, #14
 80010fa:	d469      	bmi.n	80011d0 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 80010fc:	4646      	mov	r6, r8
 80010fe:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8001100:	2784      	movs	r7, #132	; 0x84
 8001102:	4e43      	ldr	r6, [pc, #268]	; (8001210 <HAL_GPIO_Init+0x1fc>)
 8001104:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 8001106:	2580      	movs	r5, #128	; 0x80
 8001108:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	03e4      	lsls	r4, r4, #15
 800110c:	d45d      	bmi.n	80011ca <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 800110e:	4646      	mov	r6, r8
 8001110:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8001112:	2580      	movs	r5, #128	; 0x80
 8001114:	4c3e      	ldr	r4, [pc, #248]	; (8001210 <HAL_GPIO_Init+0x1fc>)
 8001116:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	000c      	movs	r4, r1
      }
    }

    position++;
 800111a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	40dc      	lsrs	r4, r3
 800111e:	3202      	adds	r2, #2
 8001120:	2c00      	cmp	r4, #0
 8001122:	d184      	bne.n	800102e <HAL_GPIO_Init+0x1a>
  }
}
 8001124:	b003      	add	sp, #12
 8001126:	bcf0      	pop	{r4, r5, r6, r7}
 8001128:	46bb      	mov	fp, r7
 800112a:	46b2      	mov	sl, r6
 800112c:	46a9      	mov	r9, r5
 800112e:	46a0      	mov	r8, r4
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001132:	6885      	ldr	r5, [r0, #8]
 8001134:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001136:	2503      	movs	r5, #3
 8001138:	4095      	lsls	r5, r2
 800113a:	46a8      	mov	r8, r5
 800113c:	43ed      	mvns	r5, r5
 800113e:	464f      	mov	r7, r9
 8001140:	9500      	str	r5, [sp, #0]
 8001142:	4645      	mov	r5, r8
 8001144:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001146:	465d      	mov	r5, fp
 8001148:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	002f      	movs	r7, r5
 800114e:	4097      	lsls	r7, r2
 8001150:	46b8      	mov	r8, r7
 8001152:	464f      	mov	r7, r9
 8001154:	4645      	mov	r5, r8
 8001156:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001158:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800115a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115c:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001160:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001162:	0926      	lsrs	r6, r4, #4
 8001164:	402e      	ands	r6, r5
 8001166:	409e      	lsls	r6, r3
 8001168:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800116a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800116c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800116e:	9d00      	ldr	r5, [sp, #0]
 8001170:	402e      	ands	r6, r5
 8001172:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001174:	465e      	mov	r6, fp
 8001176:	68b6      	ldr	r6, [r6, #8]
 8001178:	4647      	mov	r7, r8
 800117a:	4096      	lsls	r6, r2
 800117c:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800117e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	4667      	mov	r7, ip
 8001182:	4666      	mov	r6, ip
 8001184:	4096      	lsls	r6, r2
 8001186:	2f02      	cmp	r7, #2
 8001188:	d000      	beq.n	800118c <HAL_GPIO_Init+0x178>
 800118a:	e768      	b.n	800105e <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 800118c:	08dd      	lsrs	r5, r3, #3
 800118e:	00ad      	lsls	r5, r5, #2
 8001190:	46ac      	mov	ip, r5
 8001192:	4484      	add	ip, r0
 8001194:	4665      	mov	r5, ip
 8001196:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001198:	2507      	movs	r5, #7
 800119a:	401d      	ands	r5, r3
 800119c:	00ad      	lsls	r5, r5, #2
 800119e:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80011a0:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a2:	250f      	movs	r5, #15
 80011a4:	4647      	mov	r7, r8
 80011a6:	40bd      	lsls	r5, r7
 80011a8:	9f01      	ldr	r7, [sp, #4]
 80011aa:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ac:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ae:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b0:	4647      	mov	r7, r8
 80011b2:	692d      	ldr	r5, [r5, #16]
 80011b4:	40bd      	lsls	r5, r7
 80011b6:	9f01      	ldr	r7, [sp, #4]
 80011b8:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80011ba:	4665      	mov	r5, ip
 80011bc:	622f      	str	r7, [r5, #32]
 80011be:	e74e      	b.n	800105e <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011c0:	2503      	movs	r5, #3
 80011c2:	4095      	lsls	r5, r2
 80011c4:	43ed      	mvns	r5, r5
 80011c6:	9500      	str	r5, [sp, #0]
 80011c8:	e7d0      	b.n	800116c <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 80011ca:	4656      	mov	r6, sl
 80011cc:	432e      	orrs	r6, r5
 80011ce:	e7a0      	b.n	8001112 <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 80011d0:	4657      	mov	r7, sl
 80011d2:	433d      	orrs	r5, r7
 80011d4:	e794      	b.n	8001100 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 80011d6:	4657      	mov	r7, sl
 80011d8:	433d      	orrs	r5, r7
 80011da:	e789      	b.n	80010f0 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80011dc:	4657      	mov	r7, sl
 80011de:	433d      	orrs	r5, r7
 80011e0:	e77c      	b.n	80010dc <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011e2:	4667      	mov	r7, ip
 80011e4:	2603      	movs	r6, #3
 80011e6:	40be      	lsls	r6, r7
 80011e8:	464f      	mov	r7, r9
 80011ea:	4337      	orrs	r7, r6
 80011ec:	46b9      	mov	r9, r7
 80011ee:	e768      	b.n	80010c2 <HAL_GPIO_Init+0xae>
 80011f0:	4666      	mov	r6, ip
 80011f2:	2701      	movs	r7, #1
 80011f4:	40b7      	lsls	r7, r6
 80011f6:	003e      	movs	r6, r7
 80011f8:	464f      	mov	r7, r9
 80011fa:	4337      	orrs	r7, r6
 80011fc:	46b9      	mov	r9, r7
 80011fe:	e760      	b.n	80010c2 <HAL_GPIO_Init+0xae>
 8001200:	4667      	mov	r7, ip
 8001202:	2602      	movs	r6, #2
 8001204:	40be      	lsls	r6, r7
 8001206:	464f      	mov	r7, r9
 8001208:	4337      	orrs	r7, r6
 800120a:	46b9      	mov	r9, r7
 800120c:	e759      	b.n	80010c2 <HAL_GPIO_Init+0xae>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40021800 	.word	0x40021800
 8001214:	50000400 	.word	0x50000400
 8001218:	50000800 	.word	0x50000800
 800121c:	50000c00 	.word	0x50000c00

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001222:	4c13      	ldr	r4, [pc, #76]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001226:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001228:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800122a:	4013      	ands	r3, r2
 800122c:	4303      	orrs	r3, r0
 800122e:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4298      	cmp	r0, r3
 8001236:	d001      	beq.n	800123c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8001238:	0028      	movs	r0, r5
 800123a:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800123e:	490f      	ldr	r1, [pc, #60]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0058      	lsls	r0, r3, #1
 8001244:	18c0      	adds	r0, r0, r3
 8001246:	0040      	lsls	r0, r0, #1
 8001248:	f7fe ff5a 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	6963      	ldr	r3, [r4, #20]
 8001250:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001252:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001254:	4213      	tst	r3, r2
 8001256:	d102      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x3e>
 8001258:	e7ee      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 800125a:	2800      	cmp	r0, #0
 800125c:	d005      	beq.n	800126a <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125e:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001260:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001262:	4213      	tst	r3, r2
 8001264:	d1f9      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8001266:	2500      	movs	r5, #0
 8001268:	e7e6      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800126a:	2503      	movs	r5, #3
 800126c:	e7e4      	b.n	8001238 <HAL_PWREx_ControlVoltageScaling+0x18>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40007000 	.word	0x40007000
 8001274:	fffff9ff 	.word	0xfffff9ff
 8001278:	20000000 	.word	0x20000000
 800127c:	000f4240 	.word	0x000f4240

08001280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	46ce      	mov	lr, r9
 8001284:	4647      	mov	r7, r8
 8001286:	b580      	push	{r7, lr}
 8001288:	0004      	movs	r4, r0
 800128a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800128c:	2800      	cmp	r0, #0
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
 8001290:	e0f4      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	6803      	ldr	r3, [r0, #0]
 8001294:	07da      	lsls	r2, r3, #31
 8001296:	d531      	bpl.n	80012fc <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001298:	2238      	movs	r2, #56	; 0x38
 800129a:	49c7      	ldr	r1, [pc, #796]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 800129c:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129e:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a0:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012a2:	2a10      	cmp	r2, #16
 80012a4:	d100      	bne.n	80012a8 <HAL_RCC_OscConfig+0x28>
 80012a6:	e0ef      	b.n	8001488 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012a8:	2a08      	cmp	r2, #8
 80012aa:	d100      	bne.n	80012ae <HAL_RCC_OscConfig+0x2e>
 80012ac:	e0f0      	b.n	8001490 <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	6863      	ldr	r3, [r4, #4]
 80012b2:	0252      	lsls	r2, r2, #9
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d100      	bne.n	80012ba <HAL_RCC_OscConfig+0x3a>
 80012b8:	e0fd      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
 80012ba:	21a0      	movs	r1, #160	; 0xa0
 80012bc:	02c9      	lsls	r1, r1, #11
 80012be:	428b      	cmp	r3, r1
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_OscConfig+0x44>
 80012c2:	e1d0      	b.n	8001666 <HAL_RCC_OscConfig+0x3e6>
 80012c4:	4dbc      	ldr	r5, [pc, #752]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 80012c6:	49bd      	ldr	r1, [pc, #756]	; (80015bc <HAL_RCC_OscConfig+0x33c>)
 80012c8:	682a      	ldr	r2, [r5, #0]
 80012ca:	400a      	ands	r2, r1
 80012cc:	602a      	str	r2, [r5, #0]
 80012ce:	682a      	ldr	r2, [r5, #0]
 80012d0:	49bb      	ldr	r1, [pc, #748]	; (80015c0 <HAL_RCC_OscConfig+0x340>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <HAL_RCC_OscConfig+0x5c>
 80012da:	e0f0      	b.n	80014be <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fa4e 	bl	800077c <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80012e2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e4:	02bf      	lsls	r7, r7, #10
 80012e6:	e005      	b.n	80012f4 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fa48 	bl	800077c <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2864      	cmp	r0, #100	; 0x64
 80012f0:	d900      	bls.n	80012f4 <HAL_RCC_OscConfig+0x74>
 80012f2:	e138      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	423b      	tst	r3, r7
 80012f8:	d1f6      	bne.n	80012e8 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	079a      	lsls	r2, r3, #30
 80012fe:	d52b      	bpl.n	8001358 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001300:	2338      	movs	r3, #56	; 0x38
 8001302:	4aad      	ldr	r2, [pc, #692]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001304:	6891      	ldr	r1, [r2, #8]
 8001306:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800130a:	2b10      	cmp	r3, #16
 800130c:	d100      	bne.n	8001310 <HAL_RCC_OscConfig+0x90>
 800130e:	e0e7      	b.n	80014e0 <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001310:	2b00      	cmp	r3, #0
 8001312:	d000      	beq.n	8001316 <HAL_RCC_OscConfig+0x96>
 8001314:	e0e9      	b.n	80014ea <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	055b      	lsls	r3, r3, #21
 800131a:	d500      	bpl.n	800131e <HAL_RCC_OscConfig+0x9e>
 800131c:	e0aa      	b.n	8001474 <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	6851      	ldr	r1, [r2, #4]
 8001320:	6963      	ldr	r3, [r4, #20]
 8001322:	48a8      	ldr	r0, [pc, #672]	; (80015c4 <HAL_RCC_OscConfig+0x344>)
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	4001      	ands	r1, r0
 8001328:	430b      	orrs	r3, r1
 800132a:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800132c:	4aa2      	ldr	r2, [pc, #648]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 800132e:	49a6      	ldr	r1, [pc, #664]	; (80015c8 <HAL_RCC_OscConfig+0x348>)
 8001330:	6813      	ldr	r3, [r2, #0]
 8001332:	400b      	ands	r3, r1
 8001334:	6921      	ldr	r1, [r4, #16]
 8001336:	430b      	orrs	r3, r1
 8001338:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	4aa3      	ldr	r2, [pc, #652]	; (80015cc <HAL_RCC_OscConfig+0x34c>)
 800133e:	049b      	lsls	r3, r3, #18
 8001340:	0f5b      	lsrs	r3, r3, #29
 8001342:	40da      	lsrs	r2, r3
 8001344:	49a2      	ldr	r1, [pc, #648]	; (80015d0 <HAL_RCC_OscConfig+0x350>)
 8001346:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001348:	4ba2      	ldr	r3, [pc, #648]	; (80015d4 <HAL_RCC_OscConfig+0x354>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	f7ff f9d0 	bl	80006f0 <HAL_InitTick>
 8001350:	2800      	cmp	r0, #0
 8001352:	d000      	beq.n	8001356 <HAL_RCC_OscConfig+0xd6>
 8001354:	e092      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	071a      	lsls	r2, r3, #28
 800135a:	d46d      	bmi.n	8001438 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	075b      	lsls	r3, r3, #29
 800135e:	d545      	bpl.n	80013ec <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001360:	2338      	movs	r3, #56	; 0x38
 8001362:	4a95      	ldr	r2, [pc, #596]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001364:	6891      	ldr	r1, [r2, #8]
 8001366:	400b      	ands	r3, r1
 8001368:	2b20      	cmp	r3, #32
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0xee>
 800136c:	e0e3      	b.n	8001536 <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800136e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001370:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001372:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001374:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001376:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001378:	4219      	tst	r1, r3
 800137a:	d108      	bne.n	800138e <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800137e:	4319      	orrs	r1, r3
 8001380:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001382:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001384:	4013      	ands	r3, r2
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138e:	2780      	movs	r7, #128	; 0x80
 8001390:	4e91      	ldr	r6, [pc, #580]	; (80015d8 <HAL_RCC_OscConfig+0x358>)
 8001392:	007f      	lsls	r7, r7, #1
 8001394:	6833      	ldr	r3, [r6, #0]
 8001396:	423b      	tst	r3, r7
 8001398:	d100      	bne.n	800139c <HAL_RCC_OscConfig+0x11c>
 800139a:	e0d5      	b.n	8001548 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	68a3      	ldr	r3, [r4, #8]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d100      	bne.n	80013a4 <HAL_RCC_OscConfig+0x124>
 80013a2:	e123      	b.n	80015ec <HAL_RCC_OscConfig+0x36c>
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x12a>
 80013a8:	e1ba      	b.n	8001720 <HAL_RCC_OscConfig+0x4a0>
 80013aa:	2101      	movs	r1, #1
 80013ac:	4e82      	ldr	r6, [pc, #520]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 80013ae:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80013b0:	438a      	bics	r2, r1
 80013b2:	65f2      	str	r2, [r6, #92]	; 0x5c
 80013b4:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80013b6:	3103      	adds	r1, #3
 80013b8:	438a      	bics	r2, r1
 80013ba:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d000      	beq.n	80013c2 <HAL_RCC_OscConfig+0x142>
 80013c0:	e118      	b.n	80015f4 <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff f9db 	bl	800077c <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c6:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80013c8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ca:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	4d83      	ldr	r5, [pc, #524]	; (80015dc <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ce:	e005      	b.n	80013dc <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff f9d4 	bl	800077c <HAL_GetTick>
 80013d4:	1bc0      	subs	r0, r0, r7
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	d900      	bls.n	80013dc <HAL_RCC_OscConfig+0x15c>
 80013da:	e0c4      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013dc:	4642      	mov	r2, r8
 80013de:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80013e0:	421a      	tst	r2, r3
 80013e2:	d1f5      	bne.n	80013d0 <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013e4:	464b      	mov	r3, r9
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x16c>
 80013ea:	e155      	b.n	8001698 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ec:	69e3      	ldr	r3, [r4, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d020      	beq.n	8001434 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f2:	2238      	movs	r2, #56	; 0x38
 80013f4:	4d70      	ldr	r5, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 80013f6:	68a9      	ldr	r1, [r5, #8]
 80013f8:	400a      	ands	r2, r1
 80013fa:	2a10      	cmp	r2, #16
 80013fc:	d100      	bne.n	8001400 <HAL_RCC_OscConfig+0x180>
 80013fe:	e10b      	b.n	8001618 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001400:	2b02      	cmp	r3, #2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x186>
 8001404:	e14e      	b.n	80016a4 <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	4a75      	ldr	r2, [pc, #468]	; (80015e0 <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800140c:	4013      	ands	r3, r2
 800140e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001410:	f7ff f9b4 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001414:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001416:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e005      	b.n	8001426 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff f9af 	bl	800077c <HAL_GetTick>
 800141e:	1b00      	subs	r0, r0, r4
 8001420:	2802      	cmp	r0, #2
 8001422:	d900      	bls.n	8001426 <HAL_RCC_OscConfig+0x1a6>
 8001424:	e09f      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	4233      	tst	r3, r6
 800142a:	d1f6      	bne.n	800141a <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800142c:	68eb      	ldr	r3, [r5, #12]
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x364>)
 8001430:	4013      	ands	r3, r2
 8001432:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001434:	2000      	movs	r0, #0
 8001436:	e022      	b.n	800147e <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001438:	2238      	movs	r2, #56	; 0x38
 800143a:	4d5f      	ldr	r5, [pc, #380]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 800143c:	68a9      	ldr	r1, [r5, #8]
 800143e:	400a      	ands	r2, r1
 8001440:	2a18      	cmp	r2, #24
 8001442:	d02f      	beq.n	80014a4 <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001444:	69a3      	ldr	r3, [r4, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <HAL_RCC_OscConfig+0x1cc>
 800144a:	e08e      	b.n	800156a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 800144c:	2201      	movs	r2, #1
 800144e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001450:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001452:	4313      	orrs	r3, r2
 8001454:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001456:	f7ff f991 	bl	800077c <HAL_GetTick>
 800145a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145c:	e005      	b.n	800146a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff f98d 	bl	800077c <HAL_GetTick>
 8001462:	1b80      	subs	r0, r0, r6
 8001464:	2802      	cmp	r0, #2
 8001466:	d900      	bls.n	800146a <HAL_RCC_OscConfig+0x1ea>
 8001468:	e07d      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800146c:	421f      	tst	r7, r3
 800146e:	d0f6      	beq.n	800145e <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	e773      	b.n	800135c <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	68e3      	ldr	r3, [r4, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <HAL_RCC_OscConfig+0x1fc>
 800147a:	e750      	b.n	800131e <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
}
 800147e:	b003      	add	sp, #12
 8001480:	bcc0      	pop	{r6, r7}
 8001482:	46b9      	mov	r9, r7
 8001484:	46b0      	mov	r8, r6
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001488:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800148a:	0789      	lsls	r1, r1, #30
 800148c:	d000      	beq.n	8001490 <HAL_RCC_OscConfig+0x210>
 800148e:	e70e      	b.n	80012ae <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	0392      	lsls	r2, r2, #14
 8001496:	d400      	bmi.n	800149a <HAL_RCC_OscConfig+0x21a>
 8001498:	e730      	b.n	80012fc <HAL_RCC_OscConfig+0x7c>
 800149a:	6862      	ldr	r2, [r4, #4]
 800149c:	2a00      	cmp	r2, #0
 800149e:	d000      	beq.n	80014a2 <HAL_RCC_OscConfig+0x222>
 80014a0:	e72c      	b.n	80012fc <HAL_RCC_OscConfig+0x7c>
 80014a2:	e7eb      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014a4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80014a6:	0792      	lsls	r2, r2, #30
 80014a8:	d400      	bmi.n	80014ac <HAL_RCC_OscConfig+0x22c>
 80014aa:	e757      	b.n	800135c <HAL_RCC_OscConfig+0xdc>
 80014ac:	69a2      	ldr	r2, [r4, #24]
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d000      	beq.n	80014b4 <HAL_RCC_OscConfig+0x234>
 80014b2:	e753      	b.n	800135c <HAL_RCC_OscConfig+0xdc>
 80014b4:	e7e2      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b6:	4a40      	ldr	r2, [pc, #256]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 80014b8:	6811      	ldr	r1, [r2, #0]
 80014ba:	430b      	orrs	r3, r1
 80014bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014be:	f7ff f95d 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80014c4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	4f3c      	ldr	r7, [pc, #240]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
 80014c8:	02b6      	lsls	r6, r6, #10
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff f956 	bl	800077c <HAL_GetTick>
 80014d0:	1b40      	subs	r0, r0, r5
 80014d2:	2864      	cmp	r0, #100	; 0x64
 80014d4:	d847      	bhi.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4233      	tst	r3, r6
 80014da:	d0f7      	beq.n	80014cc <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	e70d      	b.n	80012fc <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e0:	3b0d      	subs	r3, #13
 80014e2:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x26a>
 80014e8:	e0c7      	b.n	800167a <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ea:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014ec:	4d32      	ldr	r5, [pc, #200]	; (80015b8 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d04e      	beq.n	8001590 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	4a34      	ldr	r2, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f6:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014f8:	4013      	ands	r3, r2
 80014fa:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014fe:	4313      	orrs	r3, r2
 8001500:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	682a      	ldr	r2, [r5, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4313      	orrs	r3, r2
 800150a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800150c:	f7ff f936 	bl	800077c <HAL_GetTick>
 8001510:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	e004      	b.n	800151e <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff f932 	bl	800077c <HAL_GetTick>
 8001518:	1b80      	subs	r0, r0, r6
 800151a:	2802      	cmp	r0, #2
 800151c:	d823      	bhi.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	423b      	tst	r3, r7
 8001522:	d0f7      	beq.n	8001514 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	686a      	ldr	r2, [r5, #4]
 8001526:	6963      	ldr	r3, [r4, #20]
 8001528:	4926      	ldr	r1, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x344>)
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	400a      	ands	r2, r1
 800152e:	4313      	orrs	r3, r2
 8001530:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	e710      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001536:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001538:	079b      	lsls	r3, r3, #30
 800153a:	d400      	bmi.n	800153e <HAL_RCC_OscConfig+0x2be>
 800153c:	e756      	b.n	80013ec <HAL_RCC_OscConfig+0x16c>
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d000      	beq.n	8001546 <HAL_RCC_OscConfig+0x2c6>
 8001544:	e752      	b.n	80013ec <HAL_RCC_OscConfig+0x16c>
 8001546:	e799      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001548:	6833      	ldr	r3, [r6, #0]
 800154a:	433b      	orrs	r3, r7
 800154c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800154e:	f7ff f915 	bl	800077c <HAL_GetTick>
 8001552:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001554:	6833      	ldr	r3, [r6, #0]
 8001556:	423b      	tst	r3, r7
 8001558:	d000      	beq.n	800155c <HAL_RCC_OscConfig+0x2dc>
 800155a:	e71f      	b.n	800139c <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff f90e 	bl	800077c <HAL_GetTick>
 8001560:	1b40      	subs	r0, r0, r5
 8001562:	2802      	cmp	r0, #2
 8001564:	d9f6      	bls.n	8001554 <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 8001566:	2003      	movs	r0, #3
 8001568:	e789      	b.n	800147e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 800156a:	2201      	movs	r2, #1
 800156c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001570:	4393      	bics	r3, r2
 8001572:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001574:	f7ff f902 	bl	800077c <HAL_GetTick>
 8001578:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157a:	e004      	b.n	8001586 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff f8fe 	bl	800077c <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	2802      	cmp	r0, #2
 8001584:	d8ef      	bhi.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001586:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001588:	421f      	tst	r7, r3
 800158a:	d1f7      	bne.n	800157c <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	e6e5      	b.n	800135c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001594:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001596:	4013      	ands	r3, r2
 8001598:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800159a:	f7ff f8ef 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159e:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80015a0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a2:	e004      	b.n	80015ae <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff f8ea 	bl	800077c <HAL_GetTick>
 80015a8:	1b80      	subs	r0, r0, r6
 80015aa:	2802      	cmp	r0, #2
 80015ac:	d8db      	bhi.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	423b      	tst	r3, r7
 80015b2:	d1f7      	bne.n	80015a4 <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	e6cf      	b.n	8001358 <HAL_RCC_OscConfig+0xd8>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	fffeffff 	.word	0xfffeffff
 80015c0:	fffbffff 	.word	0xfffbffff
 80015c4:	ffff80ff 	.word	0xffff80ff
 80015c8:	ffffc7ff 	.word	0xffffc7ff
 80015cc:	00f42400 	.word	0x00f42400
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000008 	.word	0x20000008
 80015d8:	40007000 	.word	0x40007000
 80015dc:	00001388 	.word	0x00001388
 80015e0:	feffffff 	.word	0xfeffffff
 80015e4:	effefffc 	.word	0xeffefffc
 80015e8:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	4951      	ldr	r1, [pc, #324]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
 80015ee:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80015f0:	4313      	orrs	r3, r2
 80015f2:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80015f4:	f7ff f8c2 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 80015fa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fc:	4698      	mov	r8, r3
 80015fe:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	4d4d      	ldr	r5, [pc, #308]	; (8001738 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	e004      	b.n	800160e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff f8ba 	bl	800077c <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	42a8      	cmp	r0, r5
 800160c:	d8ab      	bhi.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160e:	4643      	mov	r3, r8
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	421f      	tst	r7, r3
 8001614:	d0f6      	beq.n	8001604 <HAL_RCC_OscConfig+0x384>
 8001616:	e6e5      	b.n	80013e4 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	2b01      	cmp	r3, #1
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x39e>
 800161c:	e72e      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001620:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	6a21      	ldr	r1, [r4, #32]
 8001624:	4013      	ands	r3, r2
 8001626:	428b      	cmp	r3, r1
 8001628:	d000      	beq.n	800162c <HAL_RCC_OscConfig+0x3ac>
 800162a:	e727      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800162c:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001630:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	428b      	cmp	r3, r1
 8001634:	d000      	beq.n	8001638 <HAL_RCC_OscConfig+0x3b8>
 8001636:	e721      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001638:	21fe      	movs	r1, #254	; 0xfe
 800163a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800163c:	01c9      	lsls	r1, r1, #7
 800163e:	4011      	ands	r1, r2
 8001640:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001642:	4299      	cmp	r1, r3
 8001644:	d000      	beq.n	8001648 <HAL_RCC_OscConfig+0x3c8>
 8001646:	e719      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001648:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800164a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800164c:	039b      	lsls	r3, r3, #14
 800164e:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001650:	428b      	cmp	r3, r1
 8001652:	d000      	beq.n	8001656 <HAL_RCC_OscConfig+0x3d6>
 8001654:	e712      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001656:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001658:	0f52      	lsrs	r2, r2, #29
 800165a:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d000      	beq.n	8001662 <HAL_RCC_OscConfig+0x3e2>
 8001660:	e70c      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	e70b      	b.n	800147e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
 800166a:	02c9      	lsls	r1, r1, #11
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	4301      	orrs	r1, r0
 8001670:	6019      	str	r1, [r3, #0]
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	e721      	b.n	80014be <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	055b      	lsls	r3, r3, #21
 800167e:	d503      	bpl.n	8001688 <HAL_RCC_OscConfig+0x408>
 8001680:	68e3      	ldr	r3, [r4, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <HAL_RCC_OscConfig+0x408>
 8001686:	e6f9      	b.n	800147c <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	6851      	ldr	r1, [r2, #4]
 800168a:	6963      	ldr	r3, [r4, #20]
 800168c:	482b      	ldr	r0, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x4bc>)
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4001      	ands	r1, r0
 8001692:	430b      	orrs	r3, r1
 8001694:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001696:	e657      	b.n	8001348 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
 800169a:	4929      	ldr	r1, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x4c0>)
 800169c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800169e:	400b      	ands	r3, r1
 80016a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80016a2:	e6a3      	b.n	80013ec <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4013      	ands	r3, r2
 80016ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016ae:	f7ff f865 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b2:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80016b4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b6:	e005      	b.n	80016c4 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f860 	bl	800077c <HAL_GetTick>
 80016bc:	1b80      	subs	r0, r0, r6
 80016be:	2802      	cmp	r0, #2
 80016c0:	d900      	bls.n	80016c4 <HAL_RCC_OscConfig+0x444>
 80016c2:	e750      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	423b      	tst	r3, r7
 80016c8:	d1f6      	bne.n	80016b8 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016cc:	6a23      	ldr	r3, [r4, #32]
 80016ce:	68ea      	ldr	r2, [r5, #12]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	491d      	ldr	r1, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d4:	4e17      	ldr	r6, [pc, #92]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d6:	400a      	ands	r2, r1
 80016d8:	4313      	orrs	r3, r2
 80016da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016dc:	4313      	orrs	r3, r2
 80016de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016e0:	4313      	orrs	r3, r2
 80016e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016e4:	0212      	lsls	r2, r2, #8
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	682a      	ldr	r2, [r5, #0]
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	4313      	orrs	r3, r2
 80016f2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	68ea      	ldr	r2, [r5, #12]
 80016f8:	055b      	lsls	r3, r3, #21
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80016fe:	f7ff f83d 	bl	800077c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001702:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001704:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001706:	04ad      	lsls	r5, r5, #18
 8001708:	e005      	b.n	8001716 <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f837 	bl	800077c <HAL_GetTick>
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	2802      	cmp	r0, #2
 8001712:	d900      	bls.n	8001716 <HAL_RCC_OscConfig+0x496>
 8001714:	e727      	b.n	8001566 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001716:	6833      	ldr	r3, [r6, #0]
 8001718:	422b      	tst	r3, r5
 800171a:	d0f6      	beq.n	800170a <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 800171c:	2000      	movs	r0, #0
 800171e:	e6ae      	b.n	800147e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	2104      	movs	r1, #4
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_RCC_OscConfig+0x4b4>)
 8001724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001726:	430a      	orrs	r2, r1
 8001728:	65da      	str	r2, [r3, #92]	; 0x5c
 800172a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800172c:	3903      	subs	r1, #3
 800172e:	430a      	orrs	r2, r1
 8001730:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	e75f      	b.n	80015f4 <HAL_RCC_OscConfig+0x374>
 8001734:	40021000 	.word	0x40021000
 8001738:	00001388 	.word	0x00001388
 800173c:	ffff80ff 	.word	0xffff80ff
 8001740:	efffffff 	.word	0xefffffff
 8001744:	feffffff 	.word	0xfeffffff
 8001748:	1fc1808c 	.word	0x1fc1808c

0800174c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174c:	2338      	movs	r3, #56	; 0x38
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x88>)
{
 8001750:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001752:	6891      	ldr	r1, [r2, #8]
 8001754:	420b      	tst	r3, r1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001758:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800175a:	481f      	ldr	r0, [pc, #124]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800175c:	049b      	lsls	r3, r3, #18
 800175e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001760:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001762:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	6891      	ldr	r1, [r2, #8]
 8001766:	4019      	ands	r1, r3
 8001768:	2908      	cmp	r1, #8
 800176a:	d012      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	6891      	ldr	r1, [r2, #8]
 800176e:	4019      	ands	r1, r3
 8001770:	2910      	cmp	r1, #16
 8001772:	d010      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001774:	6891      	ldr	r1, [r2, #8]
 8001776:	4019      	ands	r1, r3
 8001778:	2920      	cmp	r1, #32
 800177a:	d022      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800177c:	6892      	ldr	r2, [r2, #8]
 800177e:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 8001780:	3b18      	subs	r3, #24
 8001782:	0018      	movs	r0, r3
 8001784:	4243      	negs	r3, r0
 8001786:	4158      	adcs	r0, r3
 8001788:	23fa      	movs	r3, #250	; 0xfa
 800178a:	4240      	negs	r0, r0
 800178c:	01db      	lsls	r3, r3, #7
 800178e:	4018      	ands	r0, r3
 8001790:	e7e7      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001792:	4812      	ldr	r0, [pc, #72]	; (80017dc <HAL_RCC_GetSysClockFreq+0x90>)
 8001794:	e7e5      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001796:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001798:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800179a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800179c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800179e:	0649      	lsls	r1, r1, #25
 80017a0:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017a2:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a4:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017a6:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 80017a8:	079b      	lsls	r3, r3, #30
 80017aa:	d00d      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017ac:	480a      	ldr	r0, [pc, #40]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80017ae:	f7fe fca7 	bl	8000100 <__udivsi3>
 80017b2:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x88>)
 80017b6:	68d9      	ldr	r1, [r3, #12]
 80017b8:	0f49      	lsrs	r1, r1, #29
 80017ba:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80017bc:	f7fe fca0 	bl	8000100 <__udivsi3>
 80017c0:	e7cf      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80017c2:	2080      	movs	r0, #128	; 0x80
 80017c4:	0200      	lsls	r0, r0, #8
 80017c6:	e7cc      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <HAL_RCC_GetSysClockFreq+0x90>)
 80017ca:	f7fe fc99 	bl	8000100 <__udivsi3>
 80017ce:	4360      	muls	r0, r4
        break;
 80017d0:	e7f0      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x68>
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <HAL_RCC_ClockConfig>:
{
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	46ce      	mov	lr, r9
 80017e4:	4647      	mov	r7, r8
 80017e6:	0005      	movs	r5, r0
 80017e8:	000c      	movs	r4, r1
 80017ea:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d026      	beq.n	800183e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	2207      	movs	r2, #7
 80017f2:	4e57      	ldr	r6, [pc, #348]	; (8001950 <HAL_RCC_ClockConfig+0x170>)
 80017f4:	6833      	ldr	r3, [r6, #0]
 80017f6:	4013      	ands	r3, r2
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d35e      	bcc.n	80018ba <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	079a      	lsls	r2, r3, #30
 8001800:	d50e      	bpl.n	8001820 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001802:	075a      	lsls	r2, r3, #29
 8001804:	d505      	bpl.n	8001812 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001806:	22e0      	movs	r2, #224	; 0xe0
 8001808:	4952      	ldr	r1, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
 800180a:	01d2      	lsls	r2, r2, #7
 800180c:	6888      	ldr	r0, [r1, #8]
 800180e:	4302      	orrs	r2, r0
 8001810:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001812:	4950      	ldr	r1, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
 8001814:	4850      	ldr	r0, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x178>)
 8001816:	688a      	ldr	r2, [r1, #8]
 8001818:	4002      	ands	r2, r0
 800181a:	68a8      	ldr	r0, [r5, #8]
 800181c:	4302      	orrs	r2, r0
 800181e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001820:	07db      	lsls	r3, r3, #31
 8001822:	d52b      	bpl.n	800187c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001824:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001826:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001828:	2b01      	cmp	r3, #1
 800182a:	d100      	bne.n	800182e <HAL_RCC_ClockConfig+0x4e>
 800182c:	e07c      	b.n	8001928 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	2b02      	cmp	r3, #2
 8001830:	d007      	beq.n	8001842 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001832:	2b00      	cmp	r3, #0
 8001834:	d000      	beq.n	8001838 <HAL_RCC_ClockConfig+0x58>
 8001836:	e07d      	b.n	8001934 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	0552      	lsls	r2, r2, #21
 800183c:	d404      	bmi.n	8001848 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	e037      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	0192      	lsls	r2, r2, #6
 8001846:	d5fa      	bpl.n	800183e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001848:	2107      	movs	r1, #7
 800184a:	4e42      	ldr	r6, [pc, #264]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
 800184c:	68b2      	ldr	r2, [r6, #8]
 800184e:	438a      	bics	r2, r1
 8001850:	4313      	orrs	r3, r2
 8001852:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001854:	f7fe ff92 	bl	800077c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	2338      	movs	r3, #56	; 0x38
 800185a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800185e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e004      	b.n	800186e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7fe ff8a 	bl	800077c <HAL_GetTick>
 8001868:	1bc0      	subs	r0, r0, r7
 800186a:	4548      	cmp	r0, r9
 800186c:	d83b      	bhi.n	80018e6 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4643      	mov	r3, r8
 8001870:	68b2      	ldr	r2, [r6, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	686b      	ldr	r3, [r5, #4]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	429a      	cmp	r2, r3
 800187a:	d1f3      	bne.n	8001864 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	2207      	movs	r2, #7
 800187e:	4e34      	ldr	r6, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x170>)
 8001880:	6833      	ldr	r3, [r6, #0]
 8001882:	4013      	ands	r3, r2
 8001884:	42a3      	cmp	r3, r4
 8001886:	d838      	bhi.n	80018fa <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	075b      	lsls	r3, r3, #29
 800188c:	d42d      	bmi.n	80018ea <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800188e:	f7ff ff5d 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
 8001894:	4a32      	ldr	r2, [pc, #200]	; (8001960 <HAL_RCC_ClockConfig+0x180>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4932      	ldr	r1, [pc, #200]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 800189a:	051b      	lsls	r3, r3, #20
 800189c:	0f1b      	lsrs	r3, r3, #28
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	589b      	ldr	r3, [r3, r2]
 80018a2:	221f      	movs	r2, #31
 80018a4:	4013      	ands	r3, r2
 80018a6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018aa:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f7fe ff1f 	bl	80006f0 <HAL_InitTick>
}
 80018b2:	bcc0      	pop	{r6, r7}
 80018b4:	46b9      	mov	r9, r7
 80018b6:	46b0      	mov	r8, r6
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	6833      	ldr	r3, [r6, #0]
 80018bc:	4393      	bics	r3, r2
 80018be:	430b      	orrs	r3, r1
 80018c0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80018c2:	f7fe ff5b 	bl	800077c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c6:	2307      	movs	r3, #7
 80018c8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80018cc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d0:	4642      	mov	r2, r8
 80018d2:	6833      	ldr	r3, [r6, #0]
 80018d4:	4013      	ands	r3, r2
 80018d6:	42a3      	cmp	r3, r4
 80018d8:	d100      	bne.n	80018dc <HAL_RCC_ClockConfig+0xfc>
 80018da:	e78f      	b.n	80017fc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7fe ff4e 	bl	800077c <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	4548      	cmp	r0, r9
 80018e4:	d9f4      	bls.n	80018d0 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80018e6:	2003      	movs	r0, #3
 80018e8:	e7e3      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ea:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_RCC_ClockConfig+0x174>)
 80018ec:	491f      	ldr	r1, [pc, #124]	; (800196c <HAL_RCC_ClockConfig+0x18c>)
 80018ee:	6893      	ldr	r3, [r2, #8]
 80018f0:	400b      	ands	r3, r1
 80018f2:	68e9      	ldr	r1, [r5, #12]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6093      	str	r3, [r2, #8]
 80018f8:	e7c9      	b.n	800188e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	6833      	ldr	r3, [r6, #0]
 80018fc:	4393      	bics	r3, r2
 80018fe:	4323      	orrs	r3, r4
 8001900:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001902:	f7fe ff3b 	bl	800077c <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001906:	2307      	movs	r3, #7
 8001908:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800190c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001910:	4642      	mov	r2, r8
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	4013      	ands	r3, r2
 8001916:	42a3      	cmp	r3, r4
 8001918:	d0b6      	beq.n	8001888 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7fe ff2f 	bl	800077c <HAL_GetTick>
 800191e:	1bc0      	subs	r0, r0, r7
 8001920:	4548      	cmp	r0, r9
 8001922:	d9f5      	bls.n	8001910 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001924:	2003      	movs	r0, #3
 8001926:	e7c4      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	0392      	lsls	r2, r2, #14
 800192c:	d500      	bpl.n	8001930 <HAL_RCC_ClockConfig+0x150>
 800192e:	e78b      	b.n	8001848 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001930:	2001      	movs	r0, #1
 8001932:	e7be      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001934:	2b03      	cmp	r3, #3
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001938:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800193a:	0792      	lsls	r2, r2, #30
 800193c:	d500      	bpl.n	8001940 <HAL_RCC_ClockConfig+0x160>
 800193e:	e783      	b.n	8001848 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
 8001942:	e7b6      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001944:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001946:	0792      	lsls	r2, r2, #30
 8001948:	d500      	bpl.n	800194c <HAL_RCC_ClockConfig+0x16c>
 800194a:	e77d      	b.n	8001848 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800194c:	2001      	movs	r0, #1
 800194e:	e7b0      	b.n	80018b2 <HAL_RCC_ClockConfig+0xd2>
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	fffff0ff 	.word	0xfffff0ff
 800195c:	00001388 	.word	0x00001388
 8001960:	0800225c 	.word	0x0800225c
 8001964:	20000000 	.word	0x20000000
 8001968:	20000008 	.word	0x20000008
 800196c:	ffff8fff 	.word	0xffff8fff

08001970 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001970:	2201      	movs	r2, #1
 8001972:	6a03      	ldr	r3, [r0, #32]
{
 8001974:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001976:	4393      	bics	r3, r2
 8001978:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800197a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800197c:	4d12      	ldr	r5, [pc, #72]	; (80019c8 <TIM_OC1_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800197e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001980:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001982:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001984:	680d      	ldr	r5, [r1, #0]
 8001986:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001988:	2502      	movs	r5, #2
 800198a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800198c:	688d      	ldr	r5, [r1, #8]
 800198e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001990:	4d0e      	ldr	r5, [pc, #56]	; (80019cc <TIM_OC1_SetConfig+0x5c>)
 8001992:	42a8      	cmp	r0, r5
 8001994:	d005      	beq.n	80019a2 <TIM_OC1_SetConfig+0x32>
 8001996:	4d0e      	ldr	r5, [pc, #56]	; (80019d0 <TIM_OC1_SetConfig+0x60>)
 8001998:	42a8      	cmp	r0, r5
 800199a:	d002      	beq.n	80019a2 <TIM_OC1_SetConfig+0x32>
 800199c:	4d0d      	ldr	r5, [pc, #52]	; (80019d4 <TIM_OC1_SetConfig+0x64>)
 800199e:	42a8      	cmp	r0, r5
 80019a0:	d10b      	bne.n	80019ba <TIM_OC1_SetConfig+0x4a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019a2:	2508      	movs	r5, #8
 80019a4:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019a6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019a8:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80019aa:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80019ac:	2504      	movs	r5, #4
 80019ae:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019b0:	4d09      	ldr	r5, [pc, #36]	; (80019d8 <TIM_OC1_SetConfig+0x68>)
 80019b2:	4025      	ands	r5, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80019b4:	694c      	ldr	r4, [r1, #20]
 80019b6:	4334      	orrs	r4, r6
 80019b8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019be:	684a      	ldr	r2, [r1, #4]
 80019c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019c2:	6203      	str	r3, [r0, #32]
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	fffeff8c 	.word	0xfffeff8c
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40014400 	.word	0x40014400
 80019d4:	40014800 	.word	0x40014800
 80019d8:	fffffcff 	.word	0xfffffcff

080019dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019dc:	6a03      	ldr	r3, [r0, #32]
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <TIM_OC3_SetConfig+0x60>)
{
 80019e0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019e2:	4013      	ands	r3, r2
 80019e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019e6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019e8:	4d15      	ldr	r5, [pc, #84]	; (8001a40 <TIM_OC3_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80019ea:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80019ec:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019ee:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019f0:	680d      	ldr	r5, [r1, #0]
 80019f2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <TIM_OC3_SetConfig+0x68>)
 80019f6:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019f8:	688b      	ldr	r3, [r1, #8]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <TIM_OC3_SetConfig+0x6c>)
 8001a00:	4290      	cmp	r0, r2
 8001a02:	d012      	beq.n	8001a2a <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a04:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <TIM_OC3_SetConfig+0x70>)
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d002      	beq.n	8001a10 <TIM_OC3_SetConfig+0x34>
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <TIM_OC3_SetConfig+0x74>)
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d106      	bne.n	8001a1e <TIM_OC3_SetConfig+0x42>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a10:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a12:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a14:	4022      	ands	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a16:	698c      	ldr	r4, [r1, #24]
 8001a18:	4334      	orrs	r4, r6
 8001a1a:	0124      	lsls	r4, r4, #4
 8001a1c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a1e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001a20:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a22:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a24:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a26:	6203      	str	r3, [r0, #32]
}
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <TIM_OC3_SetConfig+0x7c>)
 8001a2c:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a2e:	68cb      	ldr	r3, [r1, #12]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <TIM_OC3_SetConfig+0x80>)
 8001a36:	4013      	ands	r3, r2
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a38:	e7ea      	b.n	8001a10 <TIM_OC3_SetConfig+0x34>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	fffffeff 	.word	0xfffffeff
 8001a40:	fffeff8c 	.word	0xfffeff8c
 8001a44:	fffffdff 	.word	0xfffffdff
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40014400 	.word	0x40014400
 8001a50:	40014800 	.word	0x40014800
 8001a54:	ffffcfff 	.word	0xffffcfff
 8001a58:	fffff7ff 	.word	0xfffff7ff
 8001a5c:	fffffbff 	.word	0xfffffbff

08001a60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a60:	6a03      	ldr	r3, [r0, #32]
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <TIM_OC4_SetConfig+0x4c>)
{
 8001a64:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a66:	4013      	ands	r3, r2
 8001a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a6c:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8001a6e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001a70:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a72:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a74:	680a      	ldr	r2, [r1, #0]
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <TIM_OC4_SetConfig+0x54>)
 8001a7c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a7e:	688b      	ldr	r3, [r1, #8]
 8001a80:	031b      	lsls	r3, r3, #12
 8001a82:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a84:	4c0c      	ldr	r4, [pc, #48]	; (8001ab8 <TIM_OC4_SetConfig+0x58>)
 8001a86:	42a0      	cmp	r0, r4
 8001a88:	d005      	beq.n	8001a96 <TIM_OC4_SetConfig+0x36>
 8001a8a:	4c0c      	ldr	r4, [pc, #48]	; (8001abc <TIM_OC4_SetConfig+0x5c>)
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d002      	beq.n	8001a96 <TIM_OC4_SetConfig+0x36>
 8001a90:	4c0b      	ldr	r4, [pc, #44]	; (8001ac0 <TIM_OC4_SetConfig+0x60>)
 8001a92:	42a0      	cmp	r0, r4
 8001a94:	d104      	bne.n	8001aa0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a96:	4c0b      	ldr	r4, [pc, #44]	; (8001ac4 <TIM_OC4_SetConfig+0x64>)
 8001a98:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a9a:	694d      	ldr	r5, [r1, #20]
 8001a9c:	01ad      	lsls	r5, r5, #6
 8001a9e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aa2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001aa4:	684a      	ldr	r2, [r1, #4]
 8001aa6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aa8:	6203      	str	r3, [r0, #32]
}
 8001aaa:	bd30      	pop	{r4, r5, pc}
 8001aac:	ffffefff 	.word	0xffffefff
 8001ab0:	feff8cff 	.word	0xfeff8cff
 8001ab4:	ffffdfff 	.word	0xffffdfff
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	40014400 	.word	0x40014400
 8001ac0:	40014800 	.word	0x40014800
 8001ac4:	ffffbfff 	.word	0xffffbfff

08001ac8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ac8:	6a03      	ldr	r3, [r0, #32]
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <TIM_OC5_SetConfig+0x4c>)
{
 8001acc:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ace:	4013      	ands	r3, r2
 8001ad0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ad2:	6a05      	ldr	r5, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <TIM_OC5_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8001ad6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8001ad8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ada:	401a      	ands	r2, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001adc:	680b      	ldr	r3, [r1, #0]
 8001ade:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <TIM_OC5_SetConfig+0x54>)
 8001ae2:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001ae4:	688b      	ldr	r3, [r1, #8]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001aea:	4d0d      	ldr	r5, [pc, #52]	; (8001b20 <TIM_OC5_SetConfig+0x58>)
 8001aec:	42a8      	cmp	r0, r5
 8001aee:	d005      	beq.n	8001afc <TIM_OC5_SetConfig+0x34>
 8001af0:	4d0c      	ldr	r5, [pc, #48]	; (8001b24 <TIM_OC5_SetConfig+0x5c>)
 8001af2:	42a8      	cmp	r0, r5
 8001af4:	d002      	beq.n	8001afc <TIM_OC5_SetConfig+0x34>
 8001af6:	4d0c      	ldr	r5, [pc, #48]	; (8001b28 <TIM_OC5_SetConfig+0x60>)
 8001af8:	42a8      	cmp	r0, r5
 8001afa:	d104      	bne.n	8001b06 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001afc:	4d05      	ldr	r5, [pc, #20]	; (8001b14 <TIM_OC5_SetConfig+0x4c>)
 8001afe:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001b00:	694c      	ldr	r4, [r1, #20]
 8001b02:	0224      	lsls	r4, r4, #8
 8001b04:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b06:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001b08:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001b0a:	684a      	ldr	r2, [r1, #4]
 8001b0c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b0e:	6203      	str	r3, [r0, #32]
}
 8001b10:	bd30      	pop	{r4, r5, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	fffeffff 	.word	0xfffeffff
 8001b18:	fffeff8f 	.word	0xfffeff8f
 8001b1c:	fffdffff 	.word	0xfffdffff
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40014400 	.word	0x40014400
 8001b28:	40014800 	.word	0x40014800

08001b2c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b2c:	6a03      	ldr	r3, [r0, #32]
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <TIM_OC6_SetConfig+0x4c>)
{
 8001b30:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b32:	4013      	ands	r3, r2
 8001b34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b36:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <TIM_OC6_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8001b3a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8001b3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b3e:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b40:	680a      	ldr	r2, [r1, #0]
 8001b42:	0212      	lsls	r2, r2, #8
 8001b44:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <TIM_OC6_SetConfig+0x54>)
 8001b48:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b4a:	688b      	ldr	r3, [r1, #8]
 8001b4c:	051b      	lsls	r3, r3, #20
 8001b4e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b50:	4c0c      	ldr	r4, [pc, #48]	; (8001b84 <TIM_OC6_SetConfig+0x58>)
 8001b52:	42a0      	cmp	r0, r4
 8001b54:	d005      	beq.n	8001b62 <TIM_OC6_SetConfig+0x36>
 8001b56:	4c0c      	ldr	r4, [pc, #48]	; (8001b88 <TIM_OC6_SetConfig+0x5c>)
 8001b58:	42a0      	cmp	r0, r4
 8001b5a:	d002      	beq.n	8001b62 <TIM_OC6_SetConfig+0x36>
 8001b5c:	4c0b      	ldr	r4, [pc, #44]	; (8001b8c <TIM_OC6_SetConfig+0x60>)
 8001b5e:	42a0      	cmp	r0, r4
 8001b60:	d104      	bne.n	8001b6c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001b62:	4c0b      	ldr	r4, [pc, #44]	; (8001b90 <TIM_OC6_SetConfig+0x64>)
 8001b64:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001b66:	694d      	ldr	r5, [r1, #20]
 8001b68:	02ad      	lsls	r5, r5, #10
 8001b6a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b6c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001b6e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001b70:	684a      	ldr	r2, [r1, #4]
 8001b72:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b74:	6203      	str	r3, [r0, #32]
}
 8001b76:	bd30      	pop	{r4, r5, pc}
 8001b78:	ffefffff 	.word	0xffefffff
 8001b7c:	feff8fff 	.word	0xfeff8fff
 8001b80:	ffdfffff 	.word	0xffdfffff
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40014400 	.word	0x40014400
 8001b8c:	40014800 	.word	0x40014800
 8001b90:	fffbffff 	.word	0xfffbffff

08001b94 <HAL_TIM_OC_Start>:
{
 8001b94:	0003      	movs	r3, r0
 8001b96:	2910      	cmp	r1, #16
 8001b98:	d803      	bhi.n	8001ba2 <HAL_TIM_OC_Start+0xe>
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <HAL_TIM_OC_Start+0xf8>)
 8001b9c:	008a      	lsls	r2, r1, #2
 8001b9e:	5882      	ldr	r2, [r0, r2]
 8001ba0:	4697      	mov	pc, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ba2:	2243      	movs	r2, #67	; 0x43
 8001ba4:	5c9a      	ldrb	r2, [r3, r2]
 8001ba6:	2a01      	cmp	r2, #1
 8001ba8:	d13f      	bne.n	8001c2a <HAL_TIM_OC_Start+0x96>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001baa:	2910      	cmp	r1, #16
 8001bac:	d803      	bhi.n	8001bb6 <HAL_TIM_OC_Start+0x22>
 8001bae:	4838      	ldr	r0, [pc, #224]	; (8001c90 <HAL_TIM_OC_Start+0xfc>)
 8001bb0:	008a      	lsls	r2, r1, #2
 8001bb2:	5882      	ldr	r2, [r0, r2]
 8001bb4:	4697      	mov	pc, r2
 8001bb6:	2243      	movs	r2, #67	; 0x43
 8001bb8:	2002      	movs	r0, #2
 8001bba:	5498      	strb	r0, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001bbc:	221f      	movs	r2, #31
 8001bbe:	4011      	ands	r1, r2
 8001bc0:	3a1e      	subs	r2, #30
 8001bc2:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bc4:	681b      	ldr	r3, [r3, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001bc6:	6a19      	ldr	r1, [r3, #32]
 8001bc8:	4391      	bics	r1, r2
 8001bca:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001bcc:	6a19      	ldr	r1, [r3, #32]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <HAL_TIM_OC_Start+0x100>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d043      	beq.n	8001c60 <HAL_TIM_OC_Start+0xcc>
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_TIM_OC_Start+0x104>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d04f      	beq.n	8001c7e <HAL_TIM_OC_Start+0xea>
 8001bde:	4a2f      	ldr	r2, [pc, #188]	; (8001c9c <HAL_TIM_OC_Start+0x108>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04c      	beq.n	8001c7e <HAL_TIM_OC_Start+0xea>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	4a2e      	ldr	r2, [pc, #184]	; (8001ca0 <HAL_TIM_OC_Start+0x10c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d03f      	beq.n	8001c6a <HAL_TIM_OC_Start+0xd6>
    __HAL_TIM_ENABLE(htim);
 8001bea:	2101      	movs	r1, #1
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bf6:	223e      	movs	r2, #62	; 0x3e
 8001bf8:	5c9a      	ldrb	r2, [r3, r2]
    return HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bfc:	2a01      	cmp	r2, #1
 8001bfe:	d1f9      	bne.n	8001bf4 <HAL_TIM_OC_Start+0x60>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c00:	223e      	movs	r2, #62	; 0x3e
 8001c02:	2002      	movs	r0, #2
 8001c04:	5498      	strb	r0, [r3, r2]
 8001c06:	e7d9      	b.n	8001bbc <HAL_TIM_OC_Start+0x28>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c08:	223f      	movs	r2, #63	; 0x3f
 8001c0a:	5c9a      	ldrb	r2, [r3, r2]
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c0e:	2a01      	cmp	r2, #1
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_TIM_OC_Start+0x60>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c12:	223f      	movs	r2, #63	; 0x3f
 8001c14:	2002      	movs	r0, #2
 8001c16:	5498      	strb	r0, [r3, r2]
 8001c18:	e7d0      	b.n	8001bbc <HAL_TIM_OC_Start+0x28>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c1a:	2241      	movs	r2, #65	; 0x41
 8001c1c:	5c9a      	ldrb	r2, [r3, r2]
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	1e50      	subs	r0, r2, #1
 8001c22:	4182      	sbcs	r2, r0
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d0bf      	beq.n	8001baa <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	e7e2      	b.n	8001bf4 <HAL_TIM_OC_Start+0x60>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c2e:	2240      	movs	r2, #64	; 0x40
 8001c30:	5c9a      	ldrb	r2, [r3, r2]
 8001c32:	2a01      	cmp	r2, #1
 8001c34:	d0b9      	beq.n	8001baa <HAL_TIM_OC_Start+0x16>
    return HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	e7dc      	b.n	8001bf4 <HAL_TIM_OC_Start+0x60>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c3a:	2242      	movs	r2, #66	; 0x42
 8001c3c:	5c9a      	ldrb	r2, [r3, r2]
 8001c3e:	3a01      	subs	r2, #1
 8001c40:	1e50      	subs	r0, r2, #1
 8001c42:	4182      	sbcs	r2, r0
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	e7ee      	b.n	8001c26 <HAL_TIM_OC_Start+0x92>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c48:	2241      	movs	r2, #65	; 0x41
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	5498      	strb	r0, [r3, r2]
 8001c4e:	e7b5      	b.n	8001bbc <HAL_TIM_OC_Start+0x28>
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2002      	movs	r0, #2
 8001c54:	5498      	strb	r0, [r3, r2]
 8001c56:	e7b1      	b.n	8001bbc <HAL_TIM_OC_Start+0x28>
 8001c58:	2242      	movs	r2, #66	; 0x42
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	5498      	strb	r0, [r3, r2]
 8001c5e:	e7ad      	b.n	8001bbc <HAL_TIM_OC_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c64:	0212      	lsls	r2, r2, #8
 8001c66:	430a      	orrs	r2, r1
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	490d      	ldr	r1, [pc, #52]	; (8001ca4 <HAL_TIM_OC_Start+0x110>)
 8001c6e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	2a06      	cmp	r2, #6
 8001c72:	d002      	beq.n	8001c7a <HAL_TIM_OC_Start+0xe6>
 8001c74:	3907      	subs	r1, #7
 8001c76:	428a      	cmp	r2, r1
 8001c78:	d1b7      	bne.n	8001bea <HAL_TIM_OC_Start+0x56>
  return HAL_OK;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e7ba      	b.n	8001bf4 <HAL_TIM_OC_Start+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	430a      	orrs	r2, r1
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	e7ac      	b.n	8001be4 <HAL_TIM_OC_Start+0x50>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	0800229c 	.word	0x0800229c
 8001c90:	080022e0 	.word	0x080022e0
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40014400 	.word	0x40014400
 8001c9c:	40014800 	.word	0x40014800
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	00010007 	.word	0x00010007

08001ca8 <HAL_TIM_OC_Stop>:
{
 8001ca8:	b530      	push	{r4, r5, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001caa:	251f      	movs	r5, #31
 8001cac:	2401      	movs	r4, #1
 8001cae:	400d      	ands	r5, r1
 8001cb0:	40ac      	lsls	r4, r5
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001cb2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8001cb4:	6a1a      	ldr	r2, [r3, #32]
 8001cb6:	43a2      	bics	r2, r4
 8001cb8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cba:	6a1a      	ldr	r2, [r3, #32]
 8001cbc:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_TIM_OC_Stop+0xa4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d014      	beq.n	8001cee <HAL_TIM_OC_Stop+0x46>
 8001cc4:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <HAL_TIM_OC_Stop+0xa8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d011      	beq.n	8001cee <HAL_TIM_OC_Stop+0x46>
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_TIM_OC_Stop+0xac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00e      	beq.n	8001cee <HAL_TIM_OC_Stop+0x46>
  __HAL_TIM_DISABLE(htim);
 8001cd0:	6a1c      	ldr	r4, [r3, #32]
 8001cd2:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <HAL_TIM_OC_Stop+0xb0>)
 8001cd4:	4214      	tst	r4, r2
 8001cd6:	d103      	bne.n	8001ce0 <HAL_TIM_OC_Stop+0x38>
 8001cd8:	6a1c      	ldr	r4, [r3, #32]
 8001cda:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <HAL_TIM_OC_Stop+0xb4>)
 8001cdc:	4214      	tst	r4, r2
 8001cde:	d01f      	beq.n	8001d20 <HAL_TIM_OC_Stop+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d111      	bne.n	8001d08 <HAL_TIM_OC_Stop+0x60>
 8001ce4:	233e      	movs	r3, #62	; 0x3e
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	54c2      	strb	r2, [r0, r3]
}
 8001cea:	2000      	movs	r0, #0
 8001cec:	bd30      	pop	{r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8001cee:	6a1c      	ldr	r4, [r3, #32]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_TIM_OC_Stop+0xb0>)
 8001cf2:	4214      	tst	r4, r2
 8001cf4:	d1ec      	bne.n	8001cd0 <HAL_TIM_OC_Stop+0x28>
 8001cf6:	6a1c      	ldr	r4, [r3, #32]
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_TIM_OC_Stop+0xb4>)
 8001cfa:	4214      	tst	r4, r2
 8001cfc:	d1e8      	bne.n	8001cd0 <HAL_TIM_OC_Stop+0x28>
 8001cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d00:	4c17      	ldr	r4, [pc, #92]	; (8001d60 <HAL_TIM_OC_Stop+0xb8>)
 8001d02:	4022      	ands	r2, r4
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
 8001d06:	e7e3      	b.n	8001cd0 <HAL_TIM_OC_Stop+0x28>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	2904      	cmp	r1, #4
 8001d0a:	d00e      	beq.n	8001d2a <HAL_TIM_OC_Stop+0x82>
 8001d0c:	2908      	cmp	r1, #8
 8001d0e:	d014      	beq.n	8001d3a <HAL_TIM_OC_Stop+0x92>
 8001d10:	290c      	cmp	r1, #12
 8001d12:	d00e      	beq.n	8001d32 <HAL_TIM_OC_Stop+0x8a>
 8001d14:	2910      	cmp	r1, #16
 8001d16:	d014      	beq.n	8001d42 <HAL_TIM_OC_Stop+0x9a>
 8001d18:	2343      	movs	r3, #67	; 0x43
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	54c2      	strb	r2, [r0, r3]
 8001d1e:	e7e4      	b.n	8001cea <HAL_TIM_OC_Stop+0x42>
  __HAL_TIM_DISABLE(htim);
 8001d20:	2401      	movs	r4, #1
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	43a2      	bics	r2, r4
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e7da      	b.n	8001ce0 <HAL_TIM_OC_Stop+0x38>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	233f      	movs	r3, #63	; 0x3f
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	54c2      	strb	r2, [r0, r3]
 8001d30:	e7db      	b.n	8001cea <HAL_TIM_OC_Stop+0x42>
 8001d32:	2341      	movs	r3, #65	; 0x41
 8001d34:	2201      	movs	r2, #1
 8001d36:	54c2      	strb	r2, [r0, r3]
 8001d38:	e7d7      	b.n	8001cea <HAL_TIM_OC_Stop+0x42>
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	54c2      	strb	r2, [r0, r3]
 8001d40:	e7d3      	b.n	8001cea <HAL_TIM_OC_Stop+0x42>
 8001d42:	2342      	movs	r3, #66	; 0x42
 8001d44:	2201      	movs	r2, #1
 8001d46:	54c2      	strb	r2, [r0, r3]
 8001d48:	e7cf      	b.n	8001cea <HAL_TIM_OC_Stop+0x42>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40014400 	.word	0x40014400
 8001d54:	40014800 	.word	0x40014800
 8001d58:	00001111 	.word	0x00001111
 8001d5c:	00000444 	.word	0x00000444
 8001d60:	ffff7fff 	.word	0xffff7fff

08001d64 <HAL_TIM_PWM_Start>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f7ff ff15 	bl	8001b94 <HAL_TIM_OC_Start>
 8001d6a:	bd10      	pop	{r4, pc}

08001d6c <HAL_TIM_PWM_Stop>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	f7ff ff9b 	bl	8001ca8 <HAL_TIM_OC_Stop>
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 8001d76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d78:	4290      	cmp	r0, r2
 8001d7a:	d020      	beq.n	8001dbe <TIM_Base_SetConfig+0x4a>
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <TIM_Base_SetConfig+0x78>)
 8001d7e:	4290      	cmp	r0, r2
 8001d80:	d014      	beq.n	8001dac <TIM_Base_SetConfig+0x38>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <TIM_Base_SetConfig+0x7c>)
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d015      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001d88:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <TIM_Base_SetConfig+0x80>)
 8001d8a:	4290      	cmp	r0, r2
 8001d8c:	d01b      	beq.n	8001dc6 <TIM_Base_SetConfig+0x52>
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <TIM_Base_SetConfig+0x84>)
 8001d90:	4290      	cmp	r0, r2
 8001d92:	d018      	beq.n	8001dc6 <TIM_Base_SetConfig+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	4393      	bics	r3, r2
 8001d98:	694a      	ldr	r2, [r1, #20]
 8001d9a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001d9c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d9e:	688b      	ldr	r3, [r1, #8]
 8001da0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001da2:	680b      	ldr	r3, [r1, #0]
 8001da4:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001da6:	2301      	movs	r3, #1
 8001da8:	6143      	str	r3, [r0, #20]
}
 8001daa:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dac:	2270      	movs	r2, #112	; 0x70
 8001dae:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <TIM_Base_SetConfig+0x88>)
 8001db6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db8:	68ca      	ldr	r2, [r1, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	e7ea      	b.n	8001d94 <TIM_Base_SetConfig+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dbe:	2270      	movs	r2, #112	; 0x70
 8001dc0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001dc2:	684a      	ldr	r2, [r1, #4]
 8001dc4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <TIM_Base_SetConfig+0x88>)
 8001dc8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dca:	68ca      	ldr	r2, [r1, #12]
 8001dcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	694a      	ldr	r2, [r1, #20]
 8001dd4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001dd6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd8:	688b      	ldr	r3, [r1, #8]
 8001dda:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001de0:	690b      	ldr	r3, [r1, #16]
 8001de2:	6303      	str	r3, [r0, #48]	; 0x30
 8001de4:	e7df      	b.n	8001da6 <TIM_Base_SetConfig+0x32>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40002000 	.word	0x40002000
 8001df4:	40014400 	.word	0x40014400
 8001df8:	40014800 	.word	0x40014800
 8001dfc:	fffffcff 	.word	0xfffffcff

08001e00 <HAL_TIM_PWM_Init>:
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001e04:	d02a      	beq.n	8001e5c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	233d      	movs	r3, #61	; 0x3d
 8001e08:	5cc3      	ldrb	r3, [r0, r3]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e18:	c901      	ldmia	r1!, {r0}
 8001e1a:	f7ff ffab 	bl	8001d74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8001e22:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e26:	3a0a      	subs	r2, #10
 8001e28:	54a3      	strb	r3, [r4, r2]
 8001e2a:	3201      	adds	r2, #1
 8001e2c:	54a3      	strb	r3, [r4, r2]
 8001e2e:	3201      	adds	r2, #1
 8001e30:	54a3      	strb	r3, [r4, r2]
 8001e32:	3201      	adds	r2, #1
 8001e34:	54a3      	strb	r3, [r4, r2]
 8001e36:	3201      	adds	r2, #1
 8001e38:	54a3      	strb	r3, [r4, r2]
 8001e3a:	3201      	adds	r2, #1
 8001e3c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3e:	3201      	adds	r2, #1
 8001e40:	54a3      	strb	r3, [r4, r2]
 8001e42:	3201      	adds	r2, #1
 8001e44:	54a3      	strb	r3, [r4, r2]
 8001e46:	3201      	adds	r2, #1
 8001e48:	54a3      	strb	r3, [r4, r2]
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001e4e:	5563      	strb	r3, [r4, r5]
}
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e52:	333c      	adds	r3, #60	; 0x3c
 8001e54:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8001e56:	f7fe fb79 	bl	800054c <HAL_TIM_PWM_MspInit>
 8001e5a:	e7d9      	b.n	8001e10 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	e7f7      	b.n	8001e50 <HAL_TIM_PWM_Init+0x50>

08001e60 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e60:	2210      	movs	r2, #16
 8001e62:	6a03      	ldr	r3, [r0, #32]
{
 8001e64:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e66:	4393      	bics	r3, r2
 8001e68:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e6a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e6c:	4d15      	ldr	r5, [pc, #84]	; (8001ec4 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001e6e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e70:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e72:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e74:	680d      	ldr	r5, [r1, #0]
 8001e76:	022d      	lsls	r5, r5, #8
 8001e78:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	4394      	bics	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e7e:	688a      	ldr	r2, [r1, #8]
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e84:	4c10      	ldr	r4, [pc, #64]	; (8001ec8 <TIM_OC2_SetConfig+0x68>)
 8001e86:	42a0      	cmp	r0, r4
 8001e88:	d012      	beq.n	8001eb0 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8a:	4c10      	ldr	r4, [pc, #64]	; (8001ecc <TIM_OC2_SetConfig+0x6c>)
 8001e8c:	42a0      	cmp	r0, r4
 8001e8e:	d002      	beq.n	8001e96 <TIM_OC2_SetConfig+0x36>
 8001e90:	4c0f      	ldr	r4, [pc, #60]	; (8001ed0 <TIM_OC2_SetConfig+0x70>)
 8001e92:	42a0      	cmp	r0, r4
 8001e94:	d106      	bne.n	8001ea4 <TIM_OC2_SetConfig+0x44>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e96:	4c0f      	ldr	r4, [pc, #60]	; (8001ed4 <TIM_OC2_SetConfig+0x74>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e98:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e9a:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e9c:	698b      	ldr	r3, [r1, #24]
 8001e9e:	4333      	orrs	r3, r6
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 8001ea4:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ea6:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ea8:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001eaa:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001eac:	6202      	str	r2, [r0, #32]
}
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8001eb0:	2480      	movs	r4, #128	; 0x80
 8001eb2:	43a2      	bics	r2, r4
 8001eb4:	0016      	movs	r6, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eb6:	68ca      	ldr	r2, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001eb8:	3c40      	subs	r4, #64	; 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ebe:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec0:	e7e9      	b.n	8001e96 <TIM_OC2_SetConfig+0x36>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	feff8cff 	.word	0xfeff8cff
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800
 8001ed4:	fffff3ff 	.word	0xfffff3ff

08001ed8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8001ed8:	233c      	movs	r3, #60	; 0x3c
{
 8001eda:	b570      	push	{r4, r5, r6, lr}
 8001edc:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001ede:	5cc1      	ldrb	r1, [r0, r3]
{
 8001ee0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001ee2:	2901      	cmp	r1, #1
 8001ee4:	d100      	bne.n	8001ee8 <HAL_TIM_PWM_ConfigChannel+0x10>
 8001ee6:	e084      	b.n	8001ff2 <HAL_TIM_PWM_ConfigChannel+0x11a>
 8001ee8:	2101      	movs	r1, #1
 8001eea:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8001eec:	2a14      	cmp	r2, #20
 8001eee:	d803      	bhi.n	8001ef8 <HAL_TIM_PWM_ConfigChannel+0x20>
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	589b      	ldr	r3, [r3, r2]
 8001ef6:	469f      	mov	pc, r3
 8001ef8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001efa:	233c      	movs	r3, #60	; 0x3c
 8001efc:	2200      	movs	r2, #0
 8001efe:	54e2      	strb	r2, [r4, r3]
}
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f02:	6806      	ldr	r6, [r0, #0]
 8001f04:	0029      	movs	r1, r5
 8001f06:	0030      	movs	r0, r6
 8001f08:	f7ff fe10 	bl	8001b2c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4313      	orrs	r3, r2
 8001f14:	6573      	str	r3, [r6, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f16:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001f18:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001f1a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	6573      	str	r3, [r6, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f20:	692b      	ldr	r3, [r5, #16]
 8001f22:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	4313      	orrs	r3, r2
 8001f28:	6573      	str	r3, [r6, #84]	; 0x54
      break;
 8001f2a:	e7e6      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f2c:	6806      	ldr	r6, [r0, #0]
 8001f2e:	0029      	movs	r1, r5
 8001f30:	0030      	movs	r0, r6
 8001f32:	f7ff fd1d 	bl	8001970 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f36:	2208      	movs	r2, #8
 8001f38:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f40:	69b3      	ldr	r3, [r6, #24]
 8001f42:	3a04      	subs	r2, #4
 8001f44:	4393      	bics	r3, r2
 8001f46:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f48:	69b3      	ldr	r3, [r6, #24]
 8001f4a:	692a      	ldr	r2, [r5, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61b3      	str	r3, [r6, #24]
      break;
 8001f50:	e7d3      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f52:	6806      	ldr	r6, [r0, #0]
 8001f54:	0029      	movs	r1, r5
 8001f56:	0030      	movs	r0, r6
 8001f58:	f7ff ff82 	bl	8001e60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	69b2      	ldr	r2, [r6, #24]
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f66:	69b3      	ldr	r3, [r6, #24]
 8001f68:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001f6a:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f70:	692b      	ldr	r3, [r5, #16]
 8001f72:	69b2      	ldr	r2, [r6, #24]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61b3      	str	r3, [r6, #24]
      break;
 8001f7a:	e7be      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f7c:	6806      	ldr	r6, [r0, #0]
 8001f7e:	0029      	movs	r1, r5
 8001f80:	0030      	movs	r0, r6
 8001f82:	f7ff fd2b 	bl	80019dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f86:	2208      	movs	r2, #8
 8001f88:	69f3      	ldr	r3, [r6, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f90:	69f3      	ldr	r3, [r6, #28]
 8001f92:	3a04      	subs	r2, #4
 8001f94:	4393      	bics	r3, r2
 8001f96:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f98:	69f3      	ldr	r3, [r6, #28]
 8001f9a:	692a      	ldr	r2, [r5, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61f3      	str	r3, [r6, #28]
      break;
 8001fa0:	e7ab      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fa2:	6806      	ldr	r6, [r0, #0]
 8001fa4:	0029      	movs	r1, r5
 8001fa6:	0030      	movs	r0, r6
 8001fa8:	f7ff fd5a 	bl	8001a60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	69f2      	ldr	r2, [r6, #28]
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fb6:	69f3      	ldr	r3, [r6, #28]
 8001fb8:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_TIM_PWM_ConfigChannel+0x124>)
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61f3      	str	r3, [r6, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fc0:	692b      	ldr	r3, [r5, #16]
 8001fc2:	69f2      	ldr	r2, [r6, #28]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61f3      	str	r3, [r6, #28]
      break;
 8001fca:	e796      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fcc:	6806      	ldr	r6, [r0, #0]
 8001fce:	0029      	movs	r1, r5
 8001fd0:	0030      	movs	r0, r6
 8001fd2:	f7ff fd79 	bl	8001ac8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	6d73      	ldr	r3, [r6, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6573      	str	r3, [r6, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fe0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001fe2:	3a04      	subs	r2, #4
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	6573      	str	r3, [r6, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001fe8:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8001fea:	692a      	ldr	r2, [r5, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	6573      	str	r3, [r6, #84]	; 0x54
      break;
 8001ff0:	e783      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x22>
  __HAL_LOCK(htim);
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	e784      	b.n	8001f00 <HAL_TIM_PWM_ConfigChannel+0x28>
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	08002324 	.word	0x08002324
 8001ffc:	fffffbff 	.word	0xfffffbff

08002000 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002000:	233c      	movs	r3, #60	; 0x3c
{
 8002002:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002004:	5cc3      	ldrb	r3, [r0, r3]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d027      	beq.n	800205a <HAL_TIMEx_MasterConfigSynchronization+0x5a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200a:	233d      	movs	r3, #61	; 0x3d
 800200c:	2202      	movs	r2, #2
 800200e:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002010:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002012:	4d13      	ldr	r5, [pc, #76]	; (8002060 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
  tmpcr2 = htim->Instance->CR2;
 8002014:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002016:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002018:	42aa      	cmp	r2, r5
 800201a:	d00f      	beq.n	800203c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800201c:	2570      	movs	r5, #112	; 0x70
 800201e:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002020:	680d      	ldr	r5, [r1, #0]
 8002022:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002024:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d010      	beq.n	800204e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800202c:	233d      	movs	r3, #61	; 0x3d
 800202e:	2201      	movs	r2, #1
 8002030:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002032:	2200      	movs	r2, #0
 8002034:	3b01      	subs	r3, #1
 8002036:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002038:	2000      	movs	r0, #0
}
 800203a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800203c:	4d0a      	ldr	r5, [pc, #40]	; (8002068 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800203e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002040:	684d      	ldr	r5, [r1, #4]
 8002042:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8002044:	2570      	movs	r5, #112	; 0x70
 8002046:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002048:	680d      	ldr	r5, [r1, #0]
 800204a:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800204c:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002052:	688b      	ldr	r3, [r1, #8]
 8002054:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8002056:	6094      	str	r4, [r2, #8]
 8002058:	e7e8      	b.n	800202c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 800205a:	2002      	movs	r0, #2
 800205c:	e7ed      	b.n	800203a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40012c00 	.word	0x40012c00
 8002064:	40000400 	.word	0x40000400
 8002068:	ff0fffff 	.word	0xff0fffff

0800206c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800206c:	233c      	movs	r3, #60	; 0x3c
{
 800206e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002070:	5cc3      	ldrb	r3, [r0, r3]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d03d      	beq.n	80020f2 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002076:	4a20      	ldr	r2, [pc, #128]	; (80020f8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002078:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800207a:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800207c:	4013      	ands	r3, r2
 800207e:	688a      	ldr	r2, [r1, #8]
 8002080:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002084:	4013      	ands	r3, r2
 8002086:	684a      	ldr	r2, [r1, #4]
 8002088:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 800208c:	4013      	ands	r3, r2
 800208e:	680a      	ldr	r2, [r1, #0]
 8002090:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002092:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002094:	4013      	ands	r3, r2
 8002096:	690a      	ldr	r2, [r1, #16]
 8002098:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800209a:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800209c:	4013      	ands	r3, r2
 800209e:	694a      	ldr	r2, [r1, #20]
 80020a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020a2:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80020a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	698a      	ldr	r2, [r1, #24]
 80020b0:	0412      	lsls	r2, r2, #16
 80020b2:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80020b6:	4294      	cmp	r4, r2
 80020b8:	d005      	beq.n	80020c6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020ba:	6463      	str	r3, [r4, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80020bc:	2200      	movs	r2, #0
 80020be:	233c      	movs	r3, #60	; 0x3c
 80020c0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80020c2:	2000      	movs	r0, #0
}
 80020c4:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	69ca      	ldr	r2, [r1, #28]
 80020cc:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80020d4:	0512      	lsls	r2, r2, #20
 80020d6:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80020da:	401a      	ands	r2, r3
 80020dc:	6a0b      	ldr	r3, [r1, #32]
 80020de:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80020e6:	431a      	orrs	r2, r3
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80020ea:	401a      	ands	r2, r3
 80020ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80020ee:	4313      	orrs	r3, r2
 80020f0:	e7e3      	b.n	80020ba <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 80020f2:	2002      	movs	r0, #2
 80020f4:	e7e6      	b.n	80020c4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	fffffcff 	.word	0xfffffcff
 80020fc:	fffffbff 	.word	0xfffffbff
 8002100:	fffff7ff 	.word	0xfffff7ff
 8002104:	ffffefff 	.word	0xffffefff
 8002108:	ffffdfff 	.word	0xffffdfff
 800210c:	ffffbfff 	.word	0xffffbfff
 8002110:	fff0ffff 	.word	0xfff0ffff
 8002114:	40012c00 	.word	0x40012c00
 8002118:	efffffff 	.word	0xefffffff
 800211c:	ff0fffff 	.word	0xff0fffff
 8002120:	feffffff 	.word	0xfeffffff
 8002124:	fdffffff 	.word	0xfdffffff
 8002128:	dfffffff 	.word	0xdfffffff

0800212c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800212c:	b510      	push	{r4, lr}
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800212e:	7902      	ldrb	r2, [r0, #4]
{
 8002130:	0003      	movs	r3, r0
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002132:	2a00      	cmp	r2, #0
 8002134:	d016      	beq.n	8002164 <LL_EXTI_Init+0x38>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002136:	6800      	ldr	r0, [r0, #0]
 8002138:	2800      	cmp	r0, #0
 800213a:	d012      	beq.n	8002162 <LL_EXTI_Init+0x36>
    {
      switch (EXTI_InitStruct->Mode)
 800213c:	795a      	ldrb	r2, [r3, #5]
 800213e:	2a01      	cmp	r2, #1
 8002140:	d037      	beq.n	80021b2 <LL_EXTI_Init+0x86>
 8002142:	2a02      	cmp	r2, #2
 8002144:	d027      	beq.n	8002196 <LL_EXTI_Init+0x6a>
 8002146:	2101      	movs	r1, #1
 8002148:	2a00      	cmp	r2, #0
 800214a:	d019      	beq.n	8002180 <LL_EXTI_Init+0x54>
          break;
        default:
          status = 0x01u;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800214c:	799b      	ldrb	r3, [r3, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d014      	beq.n	800217c <LL_EXTI_Init+0x50>
      {
        switch (EXTI_InitStruct->Trigger)
 8002152:	2b02      	cmp	r3, #2
 8002154:	d032      	beq.n	80021bc <LL_EXTI_Init+0x90>
 8002156:	2b03      	cmp	r3, #3
 8002158:	d042      	beq.n	80021e0 <LL_EXTI_Init+0xb4>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d037      	beq.n	80021ce <LL_EXTI_Init+0xa2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            break;
          default:
            status |= 0x02u;
 800215e:	2002      	movs	r0, #2
 8002160:	4308      	orrs	r0, r1
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  }

  return status;
}
 8002162:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002164:	2480      	movs	r4, #128	; 0x80
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <LL_EXTI_Init+0xbc>)
 8002168:	6800      	ldr	r0, [r0, #0]
 800216a:	5911      	ldr	r1, [r2, r4]
 800216c:	4381      	bics	r1, r0
 800216e:	5111      	str	r1, [r2, r4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002170:	2184      	movs	r1, #132	; 0x84
 8002172:	5853      	ldr	r3, [r2, r1]
 8002174:	4383      	bics	r3, r0
 8002176:	5053      	str	r3, [r2, r1]
  uint32_t status = 0x00u;
 8002178:	2000      	movs	r0, #0
}
 800217a:	e7f2      	b.n	8002162 <LL_EXTI_Init+0x36>
 800217c:	0008      	movs	r0, r1
  return status;
 800217e:	e7f0      	b.n	8002162 <LL_EXTI_Init+0x36>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002180:	2484      	movs	r4, #132	; 0x84
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <LL_EXTI_Init+0xbc>)
 8002184:	5911      	ldr	r1, [r2, r4]
 8002186:	4381      	bics	r1, r0
 8002188:	5111      	str	r1, [r2, r4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800218a:	3c04      	subs	r4, #4
 800218c:	5911      	ldr	r1, [r2, r4]
 800218e:	4301      	orrs	r1, r0
 8002190:	5111      	str	r1, [r2, r4]
  uint32_t status = 0x00u;
 8002192:	2100      	movs	r1, #0
}
 8002194:	e7da      	b.n	800214c <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002196:	2480      	movs	r4, #128	; 0x80
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <LL_EXTI_Init+0xbc>)
 800219a:	5911      	ldr	r1, [r2, r4]
 800219c:	4301      	orrs	r1, r0
 800219e:	5111      	str	r1, [r2, r4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80021a0:	3404      	adds	r4, #4
 80021a2:	5911      	ldr	r1, [r2, r4]
 80021a4:	4301      	orrs	r1, r0
 80021a6:	5111      	str	r1, [r2, r4]
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80021a8:	799b      	ldrb	r3, [r3, #6]
  uint32_t status = 0x00u;
 80021aa:	2100      	movs	r1, #0
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0e5      	beq.n	800217c <LL_EXTI_Init+0x50>
 80021b0:	e7cf      	b.n	8002152 <LL_EXTI_Init+0x26>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80021b2:	2480      	movs	r4, #128	; 0x80
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <LL_EXTI_Init+0xbc>)
 80021b6:	5911      	ldr	r1, [r2, r4]
 80021b8:	4381      	bics	r1, r0
 80021ba:	e7f0      	b.n	800219e <LL_EXTI_Init+0x72>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <LL_EXTI_Init+0xbc>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4382      	bics	r2, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80021c2:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4302      	orrs	r2, r0
 80021c8:	605a      	str	r2, [r3, #4]
}
 80021ca:	0008      	movs	r0, r1
 80021cc:	e7c9      	b.n	8002162 <LL_EXTI_Init+0x36>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_EXTI_Init+0xbc>)
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4382      	bics	r2, r0
 80021d4:	605a      	str	r2, [r3, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4302      	orrs	r2, r0
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	0008      	movs	r0, r1
 80021de:	e7c0      	b.n	8002162 <LL_EXTI_Init+0x36>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80021e0:	4b01      	ldr	r3, [pc, #4]	; (80021e8 <LL_EXTI_Init+0xbc>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4302      	orrs	r2, r0
 80021e6:	e7ec      	b.n	80021c2 <LL_EXTI_Init+0x96>
 80021e8:	40021800 	.word	0x40021800

080021ec <memset>:
 80021ec:	0003      	movs	r3, r0
 80021ee:	1882      	adds	r2, r0, r2
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d100      	bne.n	80021f6 <memset+0xa>
 80021f4:	4770      	bx	lr
 80021f6:	7019      	strb	r1, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e7f9      	b.n	80021f0 <memset+0x4>

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	2600      	movs	r6, #0
 8002200:	4c0c      	ldr	r4, [pc, #48]	; (8002234 <__libc_init_array+0x38>)
 8002202:	4d0d      	ldr	r5, [pc, #52]	; (8002238 <__libc_init_array+0x3c>)
 8002204:	1b64      	subs	r4, r4, r5
 8002206:	10a4      	asrs	r4, r4, #2
 8002208:	42a6      	cmp	r6, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	2600      	movs	r6, #0
 800220e:	f000 f819 	bl	8002244 <_init>
 8002212:	4c0a      	ldr	r4, [pc, #40]	; (800223c <__libc_init_array+0x40>)
 8002214:	4d0a      	ldr	r5, [pc, #40]	; (8002240 <__libc_init_array+0x44>)
 8002216:	1b64      	subs	r4, r4, r5
 8002218:	10a4      	asrs	r4, r4, #2
 800221a:	42a6      	cmp	r6, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	00b3      	lsls	r3, r6, #2
 8002222:	58eb      	ldr	r3, [r5, r3]
 8002224:	4798      	blx	r3
 8002226:	3601      	adds	r6, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	00b3      	lsls	r3, r6, #2
 800222c:	58eb      	ldr	r3, [r5, r3]
 800222e:	4798      	blx	r3
 8002230:	3601      	adds	r6, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	08002378 	.word	0x08002378
 8002238:	08002378 	.word	0x08002378
 800223c:	0800237c 	.word	0x0800237c
 8002240:	08002378 	.word	0x08002378

08002244 <_init>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr

08002250 <_fini>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr
