
CPU_Fan_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f14  08002f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f14  08002f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f14  08002f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002f28  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd4  00000000  00000000  0002b61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002df30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001559c  00000000  00000000  0002ea78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd33  00000000  00000000  00044014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e93  00000000  00000000  00051d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  000dbc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e68 	.word	0x08002e68

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e68 	.word	0x08002e68

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	0018      	movs	r0, r3
 8000222:	230c      	movs	r3, #12
 8000224:	001a      	movs	r2, r3
 8000226:	2100      	movs	r1, #0
 8000228:	f002 fe16 	bl	8002e58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800022c:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800022e:	4a2e      	ldr	r2, [pc, #184]	; (80002e8 <MX_ADC1_Init+0xd0>)
 8000230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000232:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	05d2      	lsls	r2, r2, #23
 8000238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000240:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000248:	2200      	movs	r2, #0
 800024a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800024e:	2204      	movs	r2, #4
 8000250:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000254:	2200      	movs	r2, #0
 8000256:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000258:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800025a:	2200      	movs	r2, #0
 800025c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000260:	2200      	movs	r2, #0
 8000262:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000266:	2201      	movs	r2, #1
 8000268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800026c:	2220      	movs	r2, #32
 800026e:	2100      	movs	r1, #0
 8000270:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800027a:	2200      	movs	r2, #0
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000280:	222c      	movs	r2, #44	; 0x2c
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000288:	2200      	movs	r2, #0
 800028a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800028e:	2200      	movs	r2, #0
 8000290:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <MX_ADC1_Init+0xcc>)
 8000294:	2200      	movs	r2, #0
 8000296:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_ADC1_Init+0xcc>)
 800029a:	223c      	movs	r2, #60	; 0x3c
 800029c:	2100      	movs	r1, #0
 800029e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fc37 	bl	8000b1c <HAL_ADC_Init>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b2:	f000 f935 	bl	8000520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <MX_ADC1_Init+0xd4>)
 80002ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_ADC1_Init+0xcc>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fdcc 	bl	8000e6c <HAL_ADC_ConfigChannel>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80002d8:	f000 f922 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b004      	add	sp, #16
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000028 	.word	0x20000028
 80002e8:	40012400 	.word	0x40012400
 80002ec:	2c000800 	.word	0x2c000800

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	; 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 fda8 	bl	8002e58 <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a17      	ldr	r2, [pc, #92]	; (800036c <HAL_ADC_MspInit+0x7c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d128      	bne.n	8000364 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <HAL_ADC_MspInit+0x80>)
 8000314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <HAL_ADC_MspInit+0x80>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0349      	lsls	r1, r1, #13
 800031c:	430a      	orrs	r2, r1
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <HAL_ADC_MspInit+0x80>)
 8000322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	035b      	lsls	r3, r3, #13
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <HAL_ADC_MspInit+0x80>)
 8000330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_ADC_MspInit+0x80>)
 8000334:	2102      	movs	r1, #2
 8000336:	430a      	orrs	r2, r1
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
 800033a:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <HAL_ADC_MspInit+0x80>)
 800033c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800033e:	2202      	movs	r2, #2
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2203      	movs	r2, #3
 8000350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8000358:	193b      	adds	r3, r7, r4
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <HAL_ADC_MspInit+0x84>)
 800035c:	0019      	movs	r1, r3
 800035e:	0010      	movs	r0, r2
 8000360:	f001 f810 	bl	8001384 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b00b      	add	sp, #44	; 0x2c
 800036a:	bd90      	pop	{r4, r7, pc}
 800036c:	40012400 	.word	0x40012400
 8000370:	40021000 	.word	0x40021000
 8000374:	50000400 	.word	0x50000400

08000378 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b089      	sub	sp, #36	; 0x24
 800037c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	240c      	movs	r4, #12
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2314      	movs	r3, #20
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f002 fd65 	bl	8002e58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MX_GPIO_Init+0x70>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_GPIO_Init+0x70>)
 8000394:	2102      	movs	r1, #2
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	; 0x34
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_GPIO_Init+0x70>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	2202      	movs	r2, #2
 80003a0:	4013      	ands	r3, r2
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_GPIO_Init+0x70>)
 80003a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_GPIO_Init+0x70>)
 80003ac:	2101      	movs	r1, #1
 80003ae:	430a      	orrs	r2, r1
 80003b0:	635a      	str	r2, [r3, #52]	; 0x34
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_GPIO_Init+0x70>)
 80003b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b6:	2201      	movs	r2, #1
 80003b8:	4013      	ands	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Input_Pin;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0152      	lsls	r2, r2, #5
 80003c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c6:	193b      	adds	r3, r7, r4
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	2202      	movs	r2, #2
 80003d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_Input_GPIO_Port, &GPIO_InitStruct);
 80003d2:	193a      	adds	r2, r7, r4
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 ffd2 	bl	8001384 <HAL_GPIO_Init>

}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b009      	add	sp, #36	; 0x24
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	40021000 	.word	0x40021000

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f2:	f000 fa0f 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f6:	f000 f84b 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fa:	f7ff ffbd 	bl	8000378 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003fe:	f7ff ff0b 	bl	8000218 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000402:	f000 f8d3 	bl	80005ac <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t isButtonPressed = 0;
 8000406:	1dfb      	adds	r3, r7, #7
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
  uint8_t isFanSpinning = 0;
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]

  while (1)
  {

	  if(HAL_GPIO_ReadPin(Button_Input_GPIO_Port, Button_Input_Pin) && !isButtonPressed){
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	015a      	lsls	r2, r3, #5
 8000416:	23a0      	movs	r3, #160	; 0xa0
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f915 	bl	800164c <HAL_GPIO_ReadPin>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d024      	beq.n	8000470 <main+0x84>
 8000426:	1dfb      	adds	r3, r7, #7
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d120      	bne.n	8000470 <main+0x84>
		  if(isFanSpinning == 0){
 800042e:	1dbb      	adds	r3, r7, #6
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10c      	bne.n	8000450 <main+0x64>
			  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <main+0xa0>)
 8000438:	2100      	movs	r1, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fe56 	bl	80020ec <HAL_TIM_PWM_Start>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <main+0x5c>
			  {
				/* PWM Generation Error */
				Error_Handler();
 8000444:	f000 f86c 	bl	8000520 <Error_Handler>
			  }
			  isFanSpinning = 1;
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
 800044e:	e00b      	b.n	8000468 <main+0x7c>
		  }
		  else{
			  if (HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <main+0xa0>)
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f001 ff21 	bl	800229c <HAL_TIM_PWM_Stop>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <main+0x76>
			  {
				/* PWM Generation Error */
				Error_Handler();
 800045e:	f000 f85f 	bl	8000520 <Error_Handler>
			  }
			  isFanSpinning = 0;
 8000462:	1dbb      	adds	r3, r7, #6
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
		  }
		  isButtonPressed = 1;
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	2201      	movs	r2, #1
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	e00c      	b.n	800048a <main+0x9e>
	  }
	  else if(HAL_GPIO_ReadPin(Button_Input_GPIO_Port, Button_Input_Pin) == 0){
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	015a      	lsls	r2, r3, #5
 8000474:	23a0      	movs	r3, #160	; 0xa0
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f001 f8e6 	bl	800164c <HAL_GPIO_ReadPin>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d1c6      	bne.n	8000412 <main+0x26>
		  isButtonPressed = 0;
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(Button_Input_GPIO_Port, Button_Input_Pin) && !isButtonPressed){
 800048a:	e7c2      	b.n	8000412 <main+0x26>
 800048c:	2000008c 	.word	0x2000008c

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b093      	sub	sp, #76	; 0x4c
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	2414      	movs	r4, #20
 8000498:	193b      	adds	r3, r7, r4
 800049a:	0018      	movs	r0, r3
 800049c:	2334      	movs	r3, #52	; 0x34
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f002 fcd9 	bl	8002e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2310      	movs	r3, #16
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f002 fcd2 	bl	8002e58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 f8e5 	bl	8001688 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2202      	movs	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0052      	lsls	r2, r2, #1
 80004ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f911 	bl	8001708 <HAL_RCC_OscConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ea:	f000 f819 	bl	8000520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2207      	movs	r2, #7
 80004f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2100      	movs	r1, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fc0c 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000514:	f000 f804 	bl	8000520 <Error_Handler>
  }
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b013      	add	sp, #76	; 0x4c
 800051e:	bd90      	pop	{r4, r7, pc}

08000520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000524:	b672      	cpsid	i
}
 8000526:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0x8>
	...

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x44>)
 8000534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_MspInit+0x44>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	641a      	str	r2, [r3, #64]	; 0x40
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x44>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x44>)
 800054c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_MspInit+0x44>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0549      	lsls	r1, r1, #21
 8000554:	430a      	orrs	r2, r1
 8000556:	63da      	str	r2, [r3, #60]	; 0x3c
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_MspInit+0x44>)
 800055a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	055b      	lsls	r3, r3, #21
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f9a6 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b098      	sub	sp, #96	; 0x60
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	2354      	movs	r3, #84	; 0x54
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	0018      	movs	r0, r3
 80005b8:	230c      	movs	r3, #12
 80005ba:	001a      	movs	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f002 fc4b 	bl	8002e58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c2:	2338      	movs	r3, #56	; 0x38
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	231c      	movs	r3, #28
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 fc43 	bl	8002e58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2334      	movs	r3, #52	; 0x34
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f002 fc3c 	bl	8002e58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e0:	4b45      	ldr	r3, [pc, #276]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80005e2:	4a46      	ldr	r2, [pc, #280]	; (80006fc <MX_TIM1_Init+0x150>)
 80005e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005e6:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 80005f2:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80005f4:	4a42      	ldr	r2, [pc, #264]	; (8000700 <MX_TIM1_Init+0x154>)
 80005f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005fe:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <MX_TIM1_Init+0x14c>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <MX_TIM1_Init+0x14c>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <MX_TIM1_Init+0x14c>)
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fd15 	bl	800203c <HAL_TIM_PWM_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000616:	f7ff ff83 	bl	8000520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2154      	movs	r1, #84	; 0x54
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062e:	187a      	adds	r2, r7, r1
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <MX_TIM1_Init+0x14c>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fae3 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800063e:	f7ff ff6f 	bl	8000520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2138      	movs	r1, #56	; 0x38
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2260      	movs	r2, #96	; 0x60
 8000648:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 160;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	22a0      	movs	r2, #160	; 0xa0
 800064e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2208      	movs	r2, #8
 800065a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800066e:	1879      	adds	r1, r7, r1
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_TIM1_Init+0x14c>)
 8000672:	2200      	movs	r2, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fe97 	bl	80023a8 <HAL_TIM_PWM_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800067e:	f7ff ff4f 	bl	8000520 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	0192      	lsls	r2, r2, #6
 80006a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0492      	lsls	r2, r2, #18
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006d4:	1d3a      	adds	r2, r7, #4
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 faf2 	bl	8002cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80006e4:	f7ff ff1c 	bl	8000520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <MX_TIM1_Init+0x14c>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f82a 	bl	8000744 <HAL_TIM_MspPostInit>

}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b018      	add	sp, #96	; 0x60
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40012c00 	.word	0x40012c00
 8000700:	0000027f 	.word	0x0000027f

08000704 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <HAL_TIM_PWM_MspInit+0x38>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10d      	bne.n	8000732 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_TIM_PWM_MspInit+0x3c>)
 8000718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_TIM_PWM_MspInit+0x3c>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0109      	lsls	r1, r1, #4
 8000720:	430a      	orrs	r2, r1
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_TIM_PWM_MspInit+0x3c>)
 8000726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40012c00 	.word	0x40012c00
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	240c      	movs	r4, #12
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f002 fb7e 	bl	8002e58 <memset>
  if(timHandle->Instance==TIM1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <HAL_TIM_MspPostInit+0x74>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d123      	bne.n	80007ae <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_TIM_MspPostInit+0x78>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_TIM_MspPostInit+0x78>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_TIM_MspPostInit+0x78>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Fan_PWM_Pin;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2202      	movs	r2, #2
 800079e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Fan_PWM_GPIO_Port, &GPIO_InitStruct);
 80007a0:	187a      	adds	r2, r7, r1
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fdeb 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b009      	add	sp, #36	; 0x24
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40021000 	.word	0x40021000

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f7ff feed 	bl	80005a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopForever+0x6>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopForever+0xe>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopForever+0x16>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ee:	f002 fb0f 	bl	8002e10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007f2:	f7ff fdfb 	bl	80003ec <main>

080007f6 <LoopForever>:

LoopForever:
  b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000804:	08002f1c 	.word	0x08002f1c
  ldr r2, =_sbss
 8000808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800080c:	200000dc 	.word	0x200000dc

08000810 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_IRQHandler>
	...

08000814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_Init+0x3c>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_Init+0x3c>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	0049      	lsls	r1, r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f810 	bl	8000854 <HAL_InitTick>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d003      	beq.n	8000840 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fe74 	bl	800052c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	230f      	movs	r3, #15
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_InitTick+0x88>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d02b      	beq.n	80008c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_InitTick+0x8c>)
 800086e:	681c      	ldr	r4, [r3, #0]
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_InitTick+0x88>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	0019      	movs	r1, r3
 8000876:	23fa      	movs	r3, #250	; 0xfa
 8000878:	0098      	lsls	r0, r3, #2
 800087a:	f7ff fc41 	bl	8000100 <__udivsi3>
 800087e:	0003      	movs	r3, r0
 8000880:	0019      	movs	r1, r3
 8000882:	0020      	movs	r0, r4
 8000884:	f7ff fc3c 	bl	8000100 <__udivsi3>
 8000888:	0003      	movs	r3, r0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fd6d 	bl	800136a <HAL_SYSTICK_Config>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d112      	bne.n	80008ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d80a      	bhi.n	80008b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fd4c 	bl	8001340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_InitTick+0x90>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e00d      	b.n	80008cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e008      	b.n	80008cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ba:	230f      	movs	r3, #15
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e003      	b.n	80008cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008cc:	230f      	movs	r3, #15
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	781b      	ldrb	r3, [r3, #0]
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b005      	add	sp, #20
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x1c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	001a      	movs	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x20>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	18d2      	adds	r2, r2, r3
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <HAL_IncTick+0x20>)
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000008 	.word	0x20000008
 8000908:	200000d8 	.word	0x200000d8

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <HAL_GetTick+0x10>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	200000d8 	.word	0x200000d8

08000920 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000930:	401a      	ands	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	fe3fffff 	.word	0xfe3fffff

08000948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	4013      	ands	r3, r2
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	2104      	movs	r1, #4
 8000976:	400a      	ands	r2, r1
 8000978:	2107      	movs	r1, #7
 800097a:	4091      	lsls	r1, r2
 800097c:	000a      	movs	r2, r1
 800097e:	43d2      	mvns	r2, r2
 8000980:	401a      	ands	r2, r3
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2104      	movs	r1, #4
 8000986:	400b      	ands	r3, r1
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4099      	lsls	r1, r3
 800098c:	000b      	movs	r3, r1
 800098e:	431a      	orrs	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	2104      	movs	r1, #4
 80009ae:	400a      	ands	r2, r1
 80009b0:	2107      	movs	r1, #7
 80009b2:	4091      	lsls	r1, r2
 80009b4:	000a      	movs	r2, r1
 80009b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2104      	movs	r1, #4
 80009bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009be:	40da      	lsrs	r2, r3
 80009c0:	0013      	movs	r3, r2
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	211f      	movs	r1, #31
 80009de:	400a      	ands	r2, r1
 80009e0:	210f      	movs	r1, #15
 80009e2:	4091      	lsls	r1, r2
 80009e4:	000a      	movs	r2, r1
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0e9b      	lsrs	r3, r3, #26
 80009ee:	210f      	movs	r1, #15
 80009f0:	4019      	ands	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	201f      	movs	r0, #31
 80009f6:	4003      	ands	r3, r0
 80009f8:	4099      	lsls	r1, r3
 80009fa:	000b      	movs	r3, r1
 80009fc:	431a      	orrs	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	035b      	lsls	r3, r3, #13
 8000a1c:	0b5b      	lsrs	r3, r3, #13
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	0352      	lsls	r2, r2, #13
 8000a3e:	0b52      	lsrs	r2, r2, #13
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	0212      	lsls	r2, r2, #8
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a72:	400b      	ands	r3, r1
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	07ffff00 	.word	0x07ffff00

08000a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <LL_ADC_EnableInternalRegulator+0x24>)
 8000a96:	4013      	ands	r3, r2
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0552      	lsls	r2, r2, #21
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	6fffffe8 	.word	0x6fffffe8

08000ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	055b      	lsls	r3, r3, #21
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	055b      	lsls	r3, r3, #21
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d101      	bne.n	8000ace <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d101      	bne.n	8000af0 <LL_ADC_IsEnabled+0x18>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <LL_ADC_IsEnabled+0x1a>
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}

08000afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2204      	movs	r2, #4
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d101      	bne.n	8000b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b24:	231f      	movs	r3, #31
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e17f      	b.n	8000e42 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff fbcf 	bl	80002f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2254      	movs	r2, #84	; 0x54
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ffa3 	bl	8000ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d115      	bne.n	8000b9a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff88 	bl	8000a88 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b78:	4bb4      	ldr	r3, [pc, #720]	; (8000e4c <HAL_ADC_Init+0x330>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	49b4      	ldr	r1, [pc, #720]	; (8000e50 <HAL_ADC_Init+0x334>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fabe 	bl	8000100 <__udivsi3>
 8000b84:	0003      	movs	r3, r0
 8000b86:	3301      	adds	r3, #1
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b8c:	e002      	b.n	8000b94 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f9      	bne.n	8000b8e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff86 	bl	8000ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d10f      	bne.n	8000bc8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	2210      	movs	r2, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb8:	2201      	movs	r2, #1
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000bc0:	231f      	movs	r3, #31
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff94 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	2210      	movs	r2, #16
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d000      	beq.n	8000be2 <HAL_ADC_Init+0xc6>
 8000be0:	e122      	b.n	8000e28 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d000      	beq.n	8000bea <HAL_ADC_Init+0xce>
 8000be8:	e11e      	b.n	8000e28 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	4a99      	ldr	r2, [pc, #612]	; (8000e54 <HAL_ADC_Init+0x338>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ff6a 	bl	8000ad8 <LL_ADC_IsEnabled>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d000      	beq.n	8000c0a <HAL_ADC_Init+0xee>
 8000c08:	e0ad      	b.n	8000d66 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7e1b      	ldrb	r3, [r3, #24]
 8000c12:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c14:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7e5b      	ldrb	r3, [r3, #25]
 8000c1a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c1c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7e9b      	ldrb	r3, [r3, #26]
 8000c22:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c24:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_ADC_Init+0x118>
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	e000      	b.n	8000c36 <HAL_ADC_Init+0x11a>
 8000c34:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c36:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c3c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da04      	bge.n	8000c50 <HAL_ADC_Init+0x134>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	085b      	lsrs	r3, r3, #1
 8000c4e:	e001      	b.n	8000c54 <HAL_ADC_Init+0x138>
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c54:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	212c      	movs	r1, #44	; 0x2c
 8000c5a:	5c5b      	ldrb	r3, [r3, r1]
 8000c5c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c5e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	5c9b      	ldrb	r3, [r3, r2]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d115      	bne.n	8000c9c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7e9b      	ldrb	r3, [r3, #26]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	0252      	lsls	r2, r2, #9
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	e00b      	b.n	8000c9c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	2220      	movs	r2, #32
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c94:	2201      	movs	r2, #1
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00a      	beq.n	8000cba <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca8:	23e0      	movs	r3, #224	; 0xe0
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a65      	ldr	r2, [pc, #404]	; (8000e58 <HAL_ADC_Init+0x33c>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	0f9b      	lsrs	r3, r3, #30
 8000cd6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	223c      	movs	r2, #60	; 0x3c
 8000ce8:	5c9b      	ldrb	r3, [r3, r2]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d111      	bne.n	8000d12 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	0f9b      	lsrs	r3, r3, #30
 8000cf4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cfa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d00:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d06:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	4a50      	ldr	r2, [pc, #320]	; (8000e5c <HAL_ADC_Init+0x340>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	23c0      	movs	r3, #192	; 0xc0
 8000d2e:	061b      	lsls	r3, r3, #24
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d018      	beq.n	8000d66 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d012      	beq.n	8000d66 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	061b      	lsls	r3, r3, #24
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d00c      	beq.n	8000d66 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d4c:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_ADC_Init+0x344>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <HAL_ADC_Init+0x348>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	23f0      	movs	r3, #240	; 0xf0
 8000d5c:	039b      	lsls	r3, r3, #14
 8000d5e:	401a      	ands	r2, r3
 8000d60:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <HAL_ADC_Init+0x344>)
 8000d62:	430a      	orrs	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f7ff fdf6 	bl	8000962 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	493a      	ldr	r1, [pc, #232]	; (8000e68 <HAL_ADC_Init+0x34c>)
 8000d80:	001a      	movs	r2, r3
 8000d82:	f7ff fdee 	bl	8000962 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d109      	bne.n	8000da2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8000da0:	e018      	b.n	8000dd4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	039b      	lsls	r3, r3, #14
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d112      	bne.n	8000dd4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	221c      	movs	r2, #28
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	4252      	negs	r2, r2
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fdde 	bl	800099c <LL_ADC_GetSamplingTimeCommonChannels>
 8000de0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d10b      	bne.n	8000e02 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	2203      	movs	r2, #3
 8000df6:	4393      	bics	r3, r2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e00:	e01c      	b.n	8000e3c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	2212      	movs	r2, #18
 8000e08:	4393      	bics	r3, r2
 8000e0a:	2210      	movs	r2, #16
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e16:	2201      	movs	r2, #1
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e1e:	231f      	movs	r3, #31
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e26:	e009      	b.n	8000e3c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e34:	231f      	movs	r3, #31
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e3c:	231f      	movs	r3, #31
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b008      	add	sp, #32
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	00030d40 	.word	0x00030d40
 8000e54:	fffffefd 	.word	0xfffffefd
 8000e58:	fffe0201 	.word	0xfffe0201
 8000e5c:	1ffffc02 	.word	0x1ffffc02
 8000e60:	40012708 	.word	0x40012708
 8000e64:	ffc3ffff 	.word	0xffc3ffff
 8000e68:	07ffff04 	.word	0x07ffff04

08000e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e76:	2317      	movs	r3, #23
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	5c9b      	ldrb	r3, [r3, r2]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d101      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x24>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e1c0      	b.n	8001212 <HAL_ADC_ConfigChannel+0x3a6>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2254      	movs	r2, #84	; 0x54
 8000e94:	2101      	movs	r1, #1
 8000e96:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fe2c 	bl	8000afa <LL_ADC_REG_IsConversionOngoing>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d000      	beq.n	8000ea8 <HAL_ADC_ConfigChannel+0x3c>
 8000ea6:	e1a3      	b.n	80011f0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d100      	bne.n	8000eb2 <HAL_ADC_ConfigChannel+0x46>
 8000eb0:	e143      	b.n	800113a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	061b      	lsls	r3, r3, #24
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d004      	beq.n	8000ec8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000ec2:	4ac1      	ldr	r2, [pc, #772]	; (80011c8 <HAL_ADC_ConfigChannel+0x35c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d108      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	f7ff fd99 	bl	8000a0a <LL_ADC_REG_SetSequencerChAdd>
 8000ed8:	e0c9      	b.n	800106e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	211f      	movs	r1, #31
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	4099      	lsls	r1, r3
 8000eea:	000b      	movs	r3, r1
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	035b      	lsls	r3, r3, #13
 8000ef8:	0b5b      	lsrs	r3, r3, #13
 8000efa:	d105      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x9c>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0e9b      	lsrs	r3, r3, #26
 8000f02:	221f      	movs	r2, #31
 8000f04:	4013      	ands	r3, r2
 8000f06:	e098      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d000      	beq.n	8000f14 <HAL_ADC_ConfigChannel+0xa8>
 8000f12:	e091      	b.n	8001038 <HAL_ADC_ConfigChannel+0x1cc>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d000      	beq.n	8000f20 <HAL_ADC_ConfigChannel+0xb4>
 8000f1e:	e089      	b.n	8001034 <HAL_ADC_ConfigChannel+0x1c8>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2204      	movs	r2, #4
 8000f26:	4013      	ands	r3, r2
 8000f28:	d000      	beq.n	8000f2c <HAL_ADC_ConfigChannel+0xc0>
 8000f2a:	e081      	b.n	8001030 <HAL_ADC_ConfigChannel+0x1c4>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2208      	movs	r2, #8
 8000f32:	4013      	ands	r3, r2
 8000f34:	d000      	beq.n	8000f38 <HAL_ADC_ConfigChannel+0xcc>
 8000f36:	e079      	b.n	800102c <HAL_ADC_ConfigChannel+0x1c0>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d000      	beq.n	8000f44 <HAL_ADC_ConfigChannel+0xd8>
 8000f42:	e071      	b.n	8001028 <HAL_ADC_ConfigChannel+0x1bc>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d000      	beq.n	8000f50 <HAL_ADC_ConfigChannel+0xe4>
 8000f4e:	e069      	b.n	8001024 <HAL_ADC_ConfigChannel+0x1b8>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	4013      	ands	r3, r2
 8000f58:	d000      	beq.n	8000f5c <HAL_ADC_ConfigChannel+0xf0>
 8000f5a:	e061      	b.n	8001020 <HAL_ADC_ConfigChannel+0x1b4>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	4013      	ands	r3, r2
 8000f64:	d000      	beq.n	8000f68 <HAL_ADC_ConfigChannel+0xfc>
 8000f66:	e059      	b.n	800101c <HAL_ADC_ConfigChannel+0x1b0>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	d151      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x1ac>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d149      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1a8>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d141      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1a4>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d139      	bne.n	800100c <HAL_ADC_ConfigChannel+0x1a0>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	015b      	lsls	r3, r3, #5
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d131      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x19c>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	019b      	lsls	r3, r3, #6
 8000fac:	4013      	ands	r3, r2
 8000fae:	d129      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x198>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d121      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x194>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d119      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x190>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d111      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x18c>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x188>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	02db      	lsls	r3, r3, #11
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d001      	beq.n	8000ff0 <HAL_ADC_ConfigChannel+0x184>
 8000fec:	2312      	movs	r3, #18
 8000fee:	e024      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e022      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff4:	2311      	movs	r3, #17
 8000ff6:	e020      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	e01e      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	e01c      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001000:	230e      	movs	r3, #14
 8001002:	e01a      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001004:	230d      	movs	r3, #13
 8001006:	e018      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001008:	230c      	movs	r3, #12
 800100a:	e016      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 800100c:	230b      	movs	r3, #11
 800100e:	e014      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001010:	230a      	movs	r3, #10
 8001012:	e012      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001014:	2309      	movs	r3, #9
 8001016:	e010      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001018:	2308      	movs	r3, #8
 800101a:	e00e      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 800101c:	2307      	movs	r3, #7
 800101e:	e00c      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001020:	2306      	movs	r3, #6
 8001022:	e00a      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001024:	2305      	movs	r3, #5
 8001026:	e008      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001028:	2304      	movs	r3, #4
 800102a:	e006      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 800102c:	2303      	movs	r3, #3
 800102e:	e004      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001030:	2302      	movs	r3, #2
 8001032:	e002      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_ADC_ConfigChannel+0x1ce>
 8001038:	2300      	movs	r3, #0
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	6852      	ldr	r2, [r2, #4]
 800103e:	201f      	movs	r0, #31
 8001040:	4002      	ands	r2, r0
 8001042:	4093      	lsls	r3, r2
 8001044:	000a      	movs	r2, r1
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	d808      	bhi.n	800106e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	6859      	ldr	r1, [r3, #4]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	f7ff fcae 	bl	80009ca <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	001a      	movs	r2, r3
 800107c:	f7ff fce8 	bl	8000a50 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db00      	blt.n	800108a <HAL_ADC_ConfigChannel+0x21e>
 8001088:	e0bc      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff fc5b 	bl	8000948 <LL_ADC_GetCommonPathInternalCh>
 8001092:	0003      	movs	r3, r0
 8001094:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a4d      	ldr	r2, [pc, #308]	; (80011d0 <HAL_ADC_ConfigChannel+0x364>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d122      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	041b      	lsls	r3, r3, #16
 80010a6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010a8:	d11d      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0412      	lsls	r2, r2, #16
 80010b0:	4313      	orrs	r3, r2
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 80010b4:	0019      	movs	r1, r3
 80010b6:	0010      	movs	r0, r2
 80010b8:	f7ff fc32 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010bc:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <HAL_ADC_ConfigChannel+0x368>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4945      	ldr	r1, [pc, #276]	; (80011d8 <HAL_ADC_ConfigChannel+0x36c>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f81c 	bl	8000100 <__udivsi3>
 80010c8:	0003      	movs	r3, r0
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	0013      	movs	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	189b      	adds	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80010d6:	e002      	b.n	80010de <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3b01      	subs	r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f9      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010e4:	e08e      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a3c      	ldr	r2, [pc, #240]	; (80011dc <HAL_ADC_ConfigChannel+0x370>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d10e      	bne.n	800110e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	045b      	lsls	r3, r3, #17
 80010f6:	4013      	ands	r3, r2
 80010f8:	d109      	bne.n	800110e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0452      	lsls	r2, r2, #17
 8001100:	4313      	orrs	r3, r2
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 8001104:	0019      	movs	r1, r3
 8001106:	0010      	movs	r0, r2
 8001108:	f7ff fc0a 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 800110c:	e07a      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_ADC_ConfigChannel+0x374>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d000      	beq.n	800111a <HAL_ADC_ConfigChannel+0x2ae>
 8001118:	e074      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	03db      	lsls	r3, r3, #15
 8001120:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001122:	d000      	beq.n	8001126 <HAL_ADC_ConfigChannel+0x2ba>
 8001124:	e06e      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	03d2      	lsls	r2, r2, #15
 800112c:	4313      	orrs	r3, r2
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 8001130:	0019      	movs	r1, r3
 8001132:	0010      	movs	r0, r2
 8001134:	f7ff fbf4 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 8001138:	e064      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	061b      	lsls	r3, r3, #24
 8001142:	429a      	cmp	r2, r3
 8001144:	d004      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_ADC_ConfigChannel+0x35c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d107      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0019      	movs	r1, r3
 800115a:	0010      	movs	r0, r2
 800115c:	f7ff fc66 	bl	8000a2c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da4d      	bge.n	8001204 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fbec 	bl	8000948 <LL_ADC_GetCommonPathInternalCh>
 8001170:	0003      	movs	r3, r0
 8001172:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_ADC_ConfigChannel+0x364>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d108      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_ADC_ConfigChannel+0x378>)
 8001182:	4013      	ands	r3, r2
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 8001186:	0019      	movs	r1, r3
 8001188:	0010      	movs	r0, r2
 800118a:	f7ff fbc9 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 800118e:	e039      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <HAL_ADC_ConfigChannel+0x370>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d108      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <HAL_ADC_ConfigChannel+0x37c>)
 800119e:	4013      	ands	r3, r2
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 80011a2:	0019      	movs	r1, r3
 80011a4:	0010      	movs	r0, r2
 80011a6:	f7ff fbbb 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 80011aa:	e02b      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_ADC_ConfigChannel+0x374>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d126      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_ADC_ConfigChannel+0x380>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_ADC_ConfigChannel+0x360>)
 80011be:	0019      	movs	r1, r3
 80011c0:	0010      	movs	r0, r2
 80011c2:	f7ff fbad 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 80011c6:	e01d      	b.n	8001204 <HAL_ADC_ConfigChannel+0x398>
 80011c8:	80000004 	.word	0x80000004
 80011cc:	40012708 	.word	0x40012708
 80011d0:	b0001000 	.word	0xb0001000
 80011d4:	20000000 	.word	0x20000000
 80011d8:	00030d40 	.word	0x00030d40
 80011dc:	b8004000 	.word	0xb8004000
 80011e0:	b4002000 	.word	0xb4002000
 80011e4:	ff7fffff 	.word	0xff7fffff
 80011e8:	feffffff 	.word	0xfeffffff
 80011ec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f4:	2220      	movs	r2, #32
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011fc:	2317      	movs	r3, #23
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2254      	movs	r2, #84	; 0x54
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800120c:	2317      	movs	r3, #23
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	781b      	ldrb	r3, [r3, #0]
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b006      	add	sp, #24
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	0002      	movs	r2, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b7f      	cmp	r3, #127	; 0x7f
 8001230:	d828      	bhi.n	8001284 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <__NVIC_SetPriority+0xd4>)
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	33c0      	adds	r3, #192	; 0xc0
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	589b      	ldr	r3, [r3, r2]
 8001242:	1dfa      	adds	r2, r7, #7
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	0011      	movs	r1, r2
 8001248:	2203      	movs	r2, #3
 800124a:	400a      	ands	r2, r1
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	21ff      	movs	r1, #255	; 0xff
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	43d2      	mvns	r2, r2
 8001256:	401a      	ands	r2, r3
 8001258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	22ff      	movs	r2, #255	; 0xff
 8001260:	401a      	ands	r2, r3
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0018      	movs	r0, r3
 8001268:	2303      	movs	r3, #3
 800126a:	4003      	ands	r3, r0
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <__NVIC_SetPriority+0xd4>)
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b25b      	sxtb	r3, r3
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	430a      	orrs	r2, r1
 800127c:	33c0      	adds	r3, #192	; 0xc0
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001282:	e031      	b.n	80012e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <__NVIC_SetPriority+0xd8>)
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0019      	movs	r1, r3
 800128c:	230f      	movs	r3, #15
 800128e:	400b      	ands	r3, r1
 8001290:	3b08      	subs	r3, #8
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3306      	adds	r3, #6
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	1dfa      	adds	r2, r7, #7
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	0011      	movs	r1, r2
 80012a4:	2203      	movs	r2, #3
 80012a6:	400a      	ands	r2, r1
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	21ff      	movs	r1, #255	; 0xff
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	43d2      	mvns	r2, r2
 80012b2:	401a      	ands	r2, r3
 80012b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	22ff      	movs	r2, #255	; 0xff
 80012bc:	401a      	ands	r2, r3
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	2303      	movs	r3, #3
 80012c6:	4003      	ands	r3, r0
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <__NVIC_SetPriority+0xd8>)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	001c      	movs	r4, r3
 80012d4:	230f      	movs	r3, #15
 80012d6:	4023      	ands	r3, r4
 80012d8:	3b08      	subs	r3, #8
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	430a      	orrs	r2, r1
 80012de:	3306      	adds	r3, #6
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	18c3      	adds	r3, r0, r3
 80012e4:	3304      	adds	r3, #4
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b003      	add	sp, #12
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1e5a      	subs	r2, r3, #1
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	045b      	lsls	r3, r3, #17
 8001308:	429a      	cmp	r2, r3
 800130a:	d301      	bcc.n	8001310 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130c:	2301      	movs	r3, #1
 800130e:	e010      	b.n	8001332 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SysTick_Config+0x44>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	3a01      	subs	r2, #1
 8001316:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001318:	2301      	movs	r3, #1
 800131a:	425b      	negs	r3, r3
 800131c:	2103      	movs	r1, #3
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ff7c 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x44>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x44>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	0018      	movs	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	210f      	movs	r1, #15
 800134c:	187b      	adds	r3, r7, r1
 800134e:	1c02      	adds	r2, r0, #0
 8001350:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	187b      	adds	r3, r7, r1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b25b      	sxtb	r3, r3
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b004      	add	sp, #16
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ffbf 	bl	80012f8 <SysTick_Config>
 800137a:	0003      	movs	r3, r0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e147      	b.n	8001624 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4091      	lsls	r1, r2
 800139e:	000a      	movs	r2, r1
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d100      	bne.n	80013ac <HAL_GPIO_Init+0x28>
 80013aa:	e138      	b.n	800161e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x40>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	4013      	ands	r3, r2
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	43da      	mvns	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	2201      	movs	r2, #1
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	4013      	ands	r3, r2
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	4013      	ands	r3, r2
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	58d3      	ldr	r3, [r2, r3]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2207      	movs	r2, #7
 8001480:	4013      	ands	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	43da      	mvns	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2107      	movs	r1, #7
 800149a:	400b      	ands	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	401a      	ands	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	23c0      	movs	r3, #192	; 0xc0
 80014f0:	029b      	lsls	r3, r3, #10
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_GPIO_Init+0x174>
 80014f6:	e092      	b.n	800161e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x2b8>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3318      	adds	r3, #24
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	589b      	ldr	r3, [r3, r2]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2203      	movs	r2, #3
 800150a:	4013      	ands	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	220f      	movs	r2, #15
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	23a0      	movs	r3, #160	; 0xa0
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	429a      	cmp	r2, r3
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x1ca>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a45      	ldr	r2, [pc, #276]	; (8001640 <HAL_GPIO_Init+0x2bc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x1c6>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a44      	ldr	r2, [pc, #272]	; (8001644 <HAL_GPIO_Init+0x2c0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x1c2>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a43      	ldr	r2, [pc, #268]	; (8001648 <HAL_GPIO_Init+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x1be>
 800153e:	2303      	movs	r3, #3
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x1cc>
 8001542:	2305      	movs	r3, #5
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x1cc>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x1cc>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x1cc>
 800154e:	2300      	movs	r3, #0
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	2103      	movs	r1, #3
 8001554:	400a      	ands	r2, r1
 8001556:	00d2      	lsls	r2, r2, #3
 8001558:	4093      	lsls	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001560:	4936      	ldr	r1, [pc, #216]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3318      	adds	r3, #24
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	035b      	lsls	r3, r3, #13
 8001586:	4013      	ands	r3, r2
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_GPIO_Init+0x2b8>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	039b      	lsls	r3, r3, #14
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_GPIO_Init+0x2b8>)
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_GPIO_Init+0x2b8>)
 80015c4:	2384      	movs	r3, #132	; 0x84
 80015c6:	58d3      	ldr	r3, [r2, r3]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e8:	4914      	ldr	r1, [pc, #80]	; (800163c <HAL_GPIO_Init+0x2b8>)
 80015ea:	2284      	movs	r2, #132	; 0x84
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_GPIO_Init+0x2b8>)
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	58d3      	ldr	r3, [r2, r3]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <HAL_GPIO_Init+0x2b8>)
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	40da      	lsrs	r2, r3
 800162c:	1e13      	subs	r3, r2, #0
 800162e:	d000      	beq.n	8001632 <HAL_GPIO_Init+0x2ae>
 8001630:	e6b0      	b.n	8001394 <HAL_GPIO_Init+0x10>
  }
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b006      	add	sp, #24
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021800 	.word	0x40021800
 8001640:	50000400 	.word	0x50000400
 8001644:	50000800 	.word	0x50000800
 8001648:	50000c00 	.word	0x50000c00

0800164c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	000a      	movs	r2, r1
 8001656:	1cbb      	adds	r3, r7, #2
 8001658:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	1cba      	adds	r2, r7, #2
 8001660:	8812      	ldrh	r2, [r2, #0]
 8001662:	4013      	ands	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001666:	230f      	movs	r3, #15
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e003      	b.n	8001678 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001670:	230f      	movs	r3, #15
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b004      	add	sp, #16
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d11f      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	0013      	movs	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4912      	ldr	r1, [pc, #72]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe fd20 	bl	8000100 <__udivsi3>
 80016c0:	0003      	movs	r3, r0
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	e008      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e001      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e009      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	401a      	ands	r2, r3
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d0ed      	beq.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40007000 	.word	0x40007000
 80016fc:	fffff9ff 	.word	0xfffff9ff
 8001700:	20000000 	.word	0x20000000
 8001704:	000f4240 	.word	0x000f4240

08001708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e2f3      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	4013      	ands	r3, r2
 8001722:	d100      	bne.n	8001726 <HAL_RCC_OscConfig+0x1e>
 8001724:	e07c      	b.n	8001820 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4bc3      	ldr	r3, [pc, #780]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2238      	movs	r2, #56	; 0x38
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4bc0      	ldr	r3, [pc, #768]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b10      	cmp	r3, #16
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x3e>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d10b      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4bb9      	ldr	r3, [pc, #740]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	4013      	ands	r3, r2
 8001756:	d062      	beq.n	800181e <HAL_RCC_OscConfig+0x116>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d15e      	bne.n	800181e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e2ce      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x78>
 8001770:	4bb0      	ldr	r3, [pc, #704]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4baf      	ldr	r3, [pc, #700]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e020      	b.n	80017c2 <HAL_RCC_OscConfig+0xba>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	23a0      	movs	r3, #160	; 0xa0
 8001786:	02db      	lsls	r3, r3, #11
 8001788:	429a      	cmp	r2, r3
 800178a:	d10e      	bne.n	80017aa <HAL_RCC_OscConfig+0xa2>
 800178c:	4ba9      	ldr	r3, [pc, #676]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4ba8      	ldr	r3, [pc, #672]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	02c9      	lsls	r1, r1, #11
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	4ba6      	ldr	r3, [pc, #664]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4ba5      	ldr	r3, [pc, #660]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0249      	lsls	r1, r1, #9
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_OscConfig+0xba>
 80017aa:	4ba2      	ldr	r3, [pc, #648]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4ba1      	ldr	r3, [pc, #644]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017b0:	49a1      	ldr	r1, [pc, #644]	; (8001a38 <HAL_RCC_OscConfig+0x330>)
 80017b2:	400a      	ands	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	4b9f      	ldr	r3, [pc, #636]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b9e      	ldr	r3, [pc, #632]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	499f      	ldr	r1, [pc, #636]	; (8001a3c <HAL_RCC_OscConfig+0x334>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d014      	beq.n	80017f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff f89f 	bl	800090c <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff f89a 	bl	800090c <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e28d      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b93      	ldr	r3, [pc, #588]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4013      	ands	r3, r2
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xcc>
 80017f2:	e015      	b.n	8001820 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff f88a 	bl	800090c <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fe:	f7ff f885 	bl	800090c <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	; 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e278      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001810:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0xf6>
 800181c:	e000      	b.n	8001820 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d100      	bne.n	800182c <HAL_RCC_OscConfig+0x124>
 800182a:	e099      	b.n	8001960 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2203      	movs	r2, #3
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b10      	cmp	r3, #16
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x144>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d002      	beq.n	8001852 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d135      	bne.n	80018be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001852:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4013      	ands	r3, r2
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x162>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e24b      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a74      	ldr	r2, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x338>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001886:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x33c>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800189a:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	0adb      	lsrs	r3, r3, #11
 80018a0:	2207      	movs	r2, #7
 80018a2:	4013      	ands	r3, r2
 80018a4:	4a68      	ldr	r2, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x340>)
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_OscConfig+0x344>)
 80018aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x348>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7fe ffcf 	bl	8000854 <HAL_InitTick>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d051      	beq.n	800195e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e221      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x33c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018da:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0049      	lsls	r1, r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f810 	bl	800090c <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff f80b 	bl	800090c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1fe      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b48      	ldr	r3, [pc, #288]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_RCC_OscConfig+0x338>)
 8001916:	4013      	ands	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	021a      	lsls	r2, r3, #8
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	e01b      	b.n	8001960 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800192e:	4949      	ldr	r1, [pc, #292]	; (8001a54 <HAL_RCC_OscConfig+0x34c>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7fe ffea 	bl	800090c <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193e:	f7fe ffe5 	bl	800090c <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1d8      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4013      	ands	r3, r2
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x236>
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2208      	movs	r2, #8
 8001966:	4013      	ands	r3, r2
 8001968:	d047      	beq.n	80019fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800196a:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2238      	movs	r2, #56	; 0x38
 8001970:	4013      	ands	r3, r2
 8001972:	2b18      	cmp	r3, #24
 8001974:	d10a      	bne.n	800198c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001976:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d03c      	beq.n	80019fa <HAL_RCC_OscConfig+0x2f2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d138      	bne.n	80019fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e1ba      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d019      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7fe ffb4 	bl	800090c <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019aa:	f7fe ffaf 	bl	800090c <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1a2      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80019be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c0:	2202      	movs	r2, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f1      	beq.n	80019aa <HAL_RCC_OscConfig+0x2a2>
 80019c6:	e018      	b.n	80019fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	438a      	bics	r2, r1
 80019d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7fe ff9a 	bl	800090c <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7fe ff95 	bl	800090c <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e188      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f1      	bne.n	80019de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2204      	movs	r2, #4
 8001a00:	4013      	ands	r3, r2
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2fe>
 8001a04:	e0c6      	b.n	8001b94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d11e      	bne.n	8001a58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_OscConfig+0x31e>
 8001a24:	e0b6      	b.n	8001b94 <HAL_RCC_OscConfig+0x48c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d000      	beq.n	8001a30 <HAL_RCC_OscConfig+0x328>
 8001a2e:	e0b1      	b.n	8001b94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e166      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	fffeffff 	.word	0xfffeffff
 8001a3c:	fffbffff 	.word	0xfffbffff
 8001a40:	ffff80ff 	.word	0xffff80ff
 8001a44:	ffffc7ff 	.word	0xffffc7ff
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004
 8001a54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a58:	4bac      	ldr	r3, [pc, #688]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	055b      	lsls	r3, r3, #21
 8001a60:	4013      	ands	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0x360>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x362>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d011      	beq.n	8001a92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4ba7      	ldr	r3, [pc, #668]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a72:	4ba6      	ldr	r3, [pc, #664]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0549      	lsls	r1, r1, #21
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a7c:	4ba3      	ldr	r3, [pc, #652]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	055b      	lsls	r3, r3, #21
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a8a:	231f      	movs	r3, #31
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a92:	4b9f      	ldr	r3, [pc, #636]	; (8001d10 <HAL_RCC_OscConfig+0x608>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9e:	4b9c      	ldr	r3, [pc, #624]	; (8001d10 <HAL_RCC_OscConfig+0x608>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b9b      	ldr	r3, [pc, #620]	; (8001d10 <HAL_RCC_OscConfig+0x608>)
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	0049      	lsls	r1, r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001aac:	f7fe ff2e 	bl	800090c <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7fe ff29 	bl	800090c <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e11c      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_RCC_OscConfig+0x608>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x3e2>
 8001adc:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ae0:	4b8a      	ldr	r3, [pc, #552]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x404>
 8001af2:	4b86      	ldr	r3, [pc, #536]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001af8:	2104      	movs	r1, #4
 8001afa:	430a      	orrs	r2, r1
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001afe:	4b83      	ldr	r3, [pc, #524]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	430a      	orrs	r2, r1
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b10:	4b7e      	ldr	r3, [pc, #504]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b18:	4b7c      	ldr	r3, [pc, #496]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b1e:	2104      	movs	r1, #4
 8001b20:	438a      	bics	r2, r1
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d014      	beq.n	8001b56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7fe feee 	bl	800090c <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7fe fee9 	bl	800090c <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a74      	ldr	r2, [pc, #464]	; (8001d14 <HAL_RCC_OscConfig+0x60c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0db      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2202      	movs	r2, #2
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x42e>
 8001b54:	e013      	b.n	8001b7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7fe fed9 	bl	800090c <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7fe fed4 	bl	800090c <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a6a      	ldr	r2, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x60c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e0c6      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	4b65      	ldr	r3, [pc, #404]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b7e:	231f      	movs	r3, #31
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b60      	ldr	r3, [pc, #384]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8c:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001b8e:	4962      	ldr	r1, [pc, #392]	; (8001d18 <HAL_RCC_OscConfig+0x610>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x496>
 8001b9c:	e0b0      	b.n	8001d00 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2238      	movs	r2, #56	; 0x38
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d100      	bne.n	8001bac <HAL_RCC_OscConfig+0x4a4>
 8001baa:	e078      	b.n	8001c9e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d153      	bne.n	8001c5c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001bba:	4958      	ldr	r1, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x614>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fea4 	bl	800090c <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7fe fe9f 	bl	800090c <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e092      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	049b      	lsls	r3, r3, #18
 8001be4:	4013      	ands	r3, r2
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x618>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0449      	lsls	r1, r1, #17
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c2a:	2180      	movs	r1, #128	; 0x80
 8001c2c:	0549      	lsls	r1, r1, #21
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7fe fe6b 	bl	800090c <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe fe66 	bl	800090c <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e059      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x534>
 8001c5a:	e051      	b.n	8001d00 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c62:	492e      	ldr	r1, [pc, #184]	; (8001d1c <HAL_RCC_OscConfig+0x614>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe fe50 	bl	800090c <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe fe4b 	bl	800090c <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e03e      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	049b      	lsls	r3, r3, #18
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001c96:	4923      	ldr	r1, [pc, #140]	; (8001d24 <HAL_RCC_OscConfig+0x61c>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	e030      	b.n	8001d00 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e02b      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_RCC_OscConfig+0x604>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d11e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2270      	movs	r2, #112	; 0x70
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d117      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	23fe      	movs	r3, #254	; 0xfe
 8001cd0:	01db      	lsls	r3, r3, #7
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	23f8      	movs	r3, #248	; 0xf8
 8001ce2:	039b      	lsls	r3, r3, #14
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0f5b      	lsrs	r3, r3, #29
 8001cf2:	075a      	lsls	r2, r3, #29
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b008      	add	sp, #32
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	00001388 	.word	0x00001388
 8001d18:	efffffff 	.word	0xefffffff
 8001d1c:	feffffff 	.word	0xfeffffff
 8001d20:	1fc1808c 	.word	0x1fc1808c
 8001d24:	effefffc 	.word	0xeffefffc

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e9      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2207      	movs	r2, #7
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d91e      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fdd6 	bl	800090c <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7fe fdd1 	bl	800090c <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0ca      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d015      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2204      	movs	r2, #4
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d006      	beq.n	8001daa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d9c:	4b60      	ldr	r3, [pc, #384]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	21e0      	movs	r1, #224	; 0xe0
 8001da4:	01c9      	lsls	r1, r1, #7
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a5d      	ldr	r2, [pc, #372]	; (8001f24 <HAL_RCC_ClockConfig+0x1fc>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d057      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d12b      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e097      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	049b      	lsls	r3, r3, #18
 8001df0:	4013      	ands	r3, r2
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e08b      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d113      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e07f      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e18:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e074      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e06d      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e48:	f7fe fd60 	bl	800090c <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e52:	f7fe fd5b 	bl	800090c <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_RCC_ClockConfig+0x1f4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e054      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1ec      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d21e      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fd38 	bl	800090c <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea2:	f7fe fd33 	bl	800090c <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_RCC_ClockConfig+0x1f4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e02c      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_RCC_ClockConfig+0x200>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ee2:	f000 f829 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ee6:	0001      	movs	r1, r0
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	220f      	movs	r2, #15
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x204>)
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	58d3      	ldr	r3, [r2, r3]
 8001ef8:	221f      	movs	r2, #31
 8001efa:	4013      	ands	r3, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	40da      	lsrs	r2, r3
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_ClockConfig+0x208>)
 8001f02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x20c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe fca3 	bl	8000854 <HAL_InitTick>
 8001f0e:	0003      	movs	r3, r0
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	00001388 	.word	0x00001388
 8001f20:	40021000 	.word	0x40021000
 8001f24:	fffff0ff 	.word	0xfffff0ff
 8001f28:	ffff8fff 	.word	0xffff8fff
 8001f2c:	08002e80 	.word	0x08002e80
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2238      	movs	r2, #56	; 0x38
 8001f44:	4013      	ands	r3, r2
 8001f46:	d10f      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0adb      	lsrs	r3, r3, #11
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	2201      	movs	r2, #1
 8001f54:	409a      	lsls	r2, r3
 8001f56:	0013      	movs	r3, r2
 8001f58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f5a:	6839      	ldr	r1, [r7, #0]
 8001f5c:	4835      	ldr	r0, [pc, #212]	; (8002034 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f5e:	f7fe f8cf 	bl	8000100 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e05d      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2238      	movs	r2, #56	; 0x38
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e054      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2238      	movs	r2, #56	; 0x38
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d138      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	2207      	movs	r2, #7
 8001f98:	4013      	ands	r3, r2
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4824      	ldr	r0, [pc, #144]	; (8002038 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fa8:	f7fe f8aa 	bl	8000100 <__udivsi3>
 8001fac:	0003      	movs	r3, r0
 8001fae:	0019      	movs	r1, r3
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	227f      	movs	r2, #127	; 0x7f
 8001fb8:	4013      	ands	r3, r2
 8001fba:	434b      	muls	r3, r1
 8001fbc:	617b      	str	r3, [r7, #20]
        break;
 8001fbe:	e00d      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	481c      	ldr	r0, [pc, #112]	; (8002034 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fc4:	f7fe f89c 	bl	8000100 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	0019      	movs	r1, r3
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	227f      	movs	r2, #127	; 0x7f
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	434b      	muls	r3, r1
 8001fd8:	617b      	str	r3, [r7, #20]
        break;
 8001fda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0f5b      	lsrs	r3, r3, #29
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	6978      	ldr	r0, [r7, #20]
 8001fee:	f7fe f887 	bl	8000100 <__udivsi3>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e015      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2238      	movs	r2, #56	; 0x38
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b20      	cmp	r3, #32
 8002002:	d103      	bne.n	800200c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2238      	movs	r2, #56	; 0x38
 8002012:	4013      	ands	r3, r2
 8002014:	2b18      	cmp	r3, #24
 8002016:	d103      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002018:	23fa      	movs	r3, #250	; 0xfa
 800201a:	01db      	lsls	r3, r3, #7
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e001      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002024:	693b      	ldr	r3, [r7, #16]
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b006      	add	sp, #24
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	00f42400 	.word	0x00f42400
 8002038:	007a1200 	.word	0x007a1200

0800203c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e04a      	b.n	80020e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	; 0x3d
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	223c      	movs	r2, #60	; 0x3c
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f7fe fb4d 	bl	8000704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223d      	movs	r2, #61	; 0x3d
 800206e:	2102      	movs	r1, #2
 8002070:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	0019      	movs	r1, r3
 800207c:	0010      	movs	r0, r2
 800207e:	f000 fa93 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2248      	movs	r2, #72	; 0x48
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223e      	movs	r2, #62	; 0x3e
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223f      	movs	r2, #63	; 0x3f
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2241      	movs	r2, #65	; 0x41
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2242      	movs	r2, #66	; 0x42
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2243      	movs	r2, #67	; 0x43
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2244      	movs	r2, #68	; 0x44
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2245      	movs	r2, #69	; 0x45
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2246      	movs	r2, #70	; 0x46
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2247      	movs	r2, #71	; 0x47
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223d      	movs	r2, #61	; 0x3d
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_TIM_PWM_Start+0x22>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	223e      	movs	r2, #62	; 0x3e
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	4193      	sbcs	r3, r2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e037      	b.n	800217e <HAL_TIM_PWM_Start+0x92>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d108      	bne.n	8002126 <HAL_TIM_PWM_Start+0x3a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	223f      	movs	r2, #63	; 0x3f
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	4193      	sbcs	r3, r2
 8002122:	b2db      	uxtb	r3, r3
 8002124:	e02b      	b.n	800217e <HAL_TIM_PWM_Start+0x92>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d108      	bne.n	800213e <HAL_TIM_PWM_Start+0x52>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	4193      	sbcs	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	e01f      	b.n	800217e <HAL_TIM_PWM_Start+0x92>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d108      	bne.n	8002156 <HAL_TIM_PWM_Start+0x6a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2241      	movs	r2, #65	; 0x41
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	1e5a      	subs	r2, r3, #1
 8002150:	4193      	sbcs	r3, r2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e013      	b.n	800217e <HAL_TIM_PWM_Start+0x92>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d108      	bne.n	800216e <HAL_TIM_PWM_Start+0x82>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2242      	movs	r2, #66	; 0x42
 8002160:	5c9b      	ldrb	r3, [r3, r2]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	4193      	sbcs	r3, r2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	e007      	b.n	800217e <HAL_TIM_PWM_Start+0x92>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2243      	movs	r2, #67	; 0x43
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	4193      	sbcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07b      	b.n	800227e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <HAL_TIM_PWM_Start+0xaa>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	223e      	movs	r2, #62	; 0x3e
 8002190:	2102      	movs	r1, #2
 8002192:	5499      	strb	r1, [r3, r2]
 8002194:	e023      	b.n	80021de <HAL_TIM_PWM_Start+0xf2>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d104      	bne.n	80021a6 <HAL_TIM_PWM_Start+0xba>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	223f      	movs	r2, #63	; 0x3f
 80021a0:	2102      	movs	r1, #2
 80021a2:	5499      	strb	r1, [r3, r2]
 80021a4:	e01b      	b.n	80021de <HAL_TIM_PWM_Start+0xf2>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d104      	bne.n	80021b6 <HAL_TIM_PWM_Start+0xca>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2102      	movs	r1, #2
 80021b2:	5499      	strb	r1, [r3, r2]
 80021b4:	e013      	b.n	80021de <HAL_TIM_PWM_Start+0xf2>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d104      	bne.n	80021c6 <HAL_TIM_PWM_Start+0xda>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2241      	movs	r2, #65	; 0x41
 80021c0:	2102      	movs	r1, #2
 80021c2:	5499      	strb	r1, [r3, r2]
 80021c4:	e00b      	b.n	80021de <HAL_TIM_PWM_Start+0xf2>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_PWM_Start+0xea>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2242      	movs	r2, #66	; 0x42
 80021d0:	2102      	movs	r1, #2
 80021d2:	5499      	strb	r1, [r3, r2]
 80021d4:	e003      	b.n	80021de <HAL_TIM_PWM_Start+0xf2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2243      	movs	r2, #67	; 0x43
 80021da:	2102      	movs	r1, #2
 80021dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fce6 	bl	8002bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_TIM_PWM_Start+0x19c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_TIM_PWM_Start+0x11e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <HAL_TIM_PWM_Start+0x1a0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_TIM_PWM_Start+0x11e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_TIM_PWM_Start+0x1a4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_TIM_PWM_Start+0x122>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_TIM_PWM_Start+0x124>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0209      	lsls	r1, r1, #8
 8002222:	430a      	orrs	r2, r1
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_TIM_PWM_Start+0x19c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_TIM_PWM_Start+0x14e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_TIM_PWM_Start+0x1a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d116      	bne.n	8002268 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <HAL_TIM_PWM_Start+0x1ac>)
 8002242:	4013      	ands	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d016      	beq.n	800227a <HAL_TIM_PWM_Start+0x18e>
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	025b      	lsls	r3, r3, #9
 8002252:	429a      	cmp	r2, r3
 8002254:	d011      	beq.n	800227a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	e008      	b.n	800227a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e000      	b.n	800227c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40014400 	.word	0x40014400
 8002290:	40014800 	.word	0x40014800
 8002294:	40000400 	.word	0x40000400
 8002298:	00010007 	.word	0x00010007

0800229c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 fc82 	bl	8002bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a35      	ldr	r2, [pc, #212]	; (8002390 <HAL_TIM_PWM_Stop+0xf4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_TIM_PWM_Stop+0x36>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_TIM_PWM_Stop+0xf8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIM_PWM_Stop+0x36>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a32      	ldr	r2, [pc, #200]	; (8002398 <HAL_TIM_PWM_Stop+0xfc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PWM_Stop+0x3a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_TIM_PWM_Stop+0x3c>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a2e      	ldr	r2, [pc, #184]	; (800239c <HAL_TIM_PWM_Stop+0x100>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	d10d      	bne.n	8002304 <HAL_TIM_PWM_Stop+0x68>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <HAL_TIM_PWM_Stop+0x104>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_PWM_Stop+0x68>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4929      	ldr	r1, [pc, #164]	; (80023a4 <HAL_TIM_PWM_Stop+0x108>)
 8002300:	400a      	ands	r2, r1
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_TIM_PWM_Stop+0x100>)
 800230c:	4013      	ands	r3, r2
 800230e:	d10d      	bne.n	800232c <HAL_TIM_PWM_Stop+0x90>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_TIM_PWM_Stop+0x104>)
 8002318:	4013      	ands	r3, r2
 800231a:	d107      	bne.n	800232c <HAL_TIM_PWM_Stop+0x90>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	438a      	bics	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <HAL_TIM_PWM_Stop+0xa0>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	223e      	movs	r2, #62	; 0x3e
 8002336:	2101      	movs	r1, #1
 8002338:	5499      	strb	r1, [r3, r2]
 800233a:	e023      	b.n	8002384 <HAL_TIM_PWM_Stop+0xe8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d104      	bne.n	800234c <HAL_TIM_PWM_Stop+0xb0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223f      	movs	r2, #63	; 0x3f
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]
 800234a:	e01b      	b.n	8002384 <HAL_TIM_PWM_Stop+0xe8>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d104      	bne.n	800235c <HAL_TIM_PWM_Stop+0xc0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
 800235a:	e013      	b.n	8002384 <HAL_TIM_PWM_Stop+0xe8>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d104      	bne.n	800236c <HAL_TIM_PWM_Stop+0xd0>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]
 800236a:	e00b      	b.n	8002384 <HAL_TIM_PWM_Stop+0xe8>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d104      	bne.n	800237c <HAL_TIM_PWM_Stop+0xe0>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2242      	movs	r2, #66	; 0x42
 8002376:	2101      	movs	r1, #1
 8002378:	5499      	strb	r1, [r3, r2]
 800237a:	e003      	b.n	8002384 <HAL_TIM_PWM_Stop+0xe8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2243      	movs	r2, #67	; 0x43
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	00001111 	.word	0x00001111
 80023a0:	00000444 	.word	0x00000444
 80023a4:	ffff7fff 	.word	0xffff7fff

080023a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2317      	movs	r3, #23
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	223c      	movs	r2, #60	; 0x3c
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0e5      	b.n	8002596 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	223c      	movs	r2, #60	; 0x3c
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b14      	cmp	r3, #20
 80023d6:	d900      	bls.n	80023da <HAL_TIM_PWM_ConfigChannel+0x32>
 80023d8:	e0d1      	b.n	800257e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	009a      	lsls	r2, r3, #2
 80023de:	4b70      	ldr	r3, [pc, #448]	; (80025a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023e0:	18d3      	adds	r3, r2, r3
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f946 	bl	8002680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2108      	movs	r1, #8
 8002400:	430a      	orrs	r2, r1
 8002402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	438a      	bics	r2, r1
 8002412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6999      	ldr	r1, [r3, #24]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	619a      	str	r2, [r3, #24]
      break;
 8002426:	e0af      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f9a5 	bl	8002780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0109      	lsls	r1, r1, #4
 8002444:	430a      	orrs	r2, r1
 8002446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4954      	ldr	r1, [pc, #336]	; (80025a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002454:	400a      	ands	r2, r1
 8002456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6999      	ldr	r1, [r3, #24]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	021a      	lsls	r2, r3, #8
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	619a      	str	r2, [r3, #24]
      break;
 800246c:	e08c      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fa00 	bl	800287c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2108      	movs	r1, #8
 8002488:	430a      	orrs	r2, r1
 800248a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69d9      	ldr	r1, [r3, #28]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	61da      	str	r2, [r3, #28]
      break;
 80024ae:	e06b      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 fa61 	bl	8002980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0109      	lsls	r1, r1, #4
 80024cc:	430a      	orrs	r2, r1
 80024ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4932      	ldr	r1, [pc, #200]	; (80025a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80024dc:	400a      	ands	r2, r1
 80024de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69d9      	ldr	r1, [r3, #28]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	61da      	str	r2, [r3, #28]
      break;
 80024f4:	e048      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 faa2 	bl	8002a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2108      	movs	r1, #8
 8002510:	430a      	orrs	r2, r1
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2104      	movs	r1, #4
 8002520:	438a      	bics	r2, r1
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002536:	e027      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fadb 	bl	8002afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0109      	lsls	r1, r1, #4
 8002554:	430a      	orrs	r2, r1
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4910      	ldr	r1, [pc, #64]	; (80025a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002564:	400a      	ands	r2, r1
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800257c:	e004      	b.n	8002588 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
      break;
 8002586:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	223c      	movs	r2, #60	; 0x3c
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

  return status;
 8002590:	2317      	movs	r3, #23
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	08002ec0 	.word	0x08002ec0
 80025a4:	fffffbff 	.word	0xfffffbff

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d003      	beq.n	80025c8 <TIM_Base_SetConfig+0x20>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <TIM_Base_SetConfig+0xc4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d108      	bne.n	80025da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2270      	movs	r2, #112	; 0x70
 80025cc:	4393      	bics	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00f      	beq.n	8002602 <TIM_Base_SetConfig+0x5a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a21      	ldr	r2, [pc, #132]	; (800266c <TIM_Base_SetConfig+0xc4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_Base_SetConfig+0x5a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <TIM_Base_SetConfig+0xc8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0x5a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <TIM_Base_SetConfig+0xcc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0x5a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <TIM_Base_SetConfig+0xd0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <TIM_Base_SetConfig+0xd4>)
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	4393      	bics	r3, r2
 800261a:	001a      	movs	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <TIM_Base_SetConfig+0xc0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_Base_SetConfig+0xaa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <TIM_Base_SetConfig+0xcc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_Base_SetConfig+0xaa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <TIM_Base_SetConfig+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d103      	bne.n	800265a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	615a      	str	r2, [r3, #20]
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400
 8002670:	40002000 	.word	0x40002000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	fffffcff 	.word	0xfffffcff

08002680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2201      	movs	r2, #1
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <TIM_OC1_SetConfig+0xe8>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4393      	bics	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4393      	bics	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <TIM_OC1_SetConfig+0xec>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_OC1_SetConfig+0x6e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <TIM_OC1_SetConfig+0xf0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_OC1_SetConfig+0x6e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <TIM_OC1_SetConfig+0xf4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10c      	bne.n	8002708 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2208      	movs	r2, #8
 80026f2:	4393      	bics	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2204      	movs	r2, #4
 8002704:	4393      	bics	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a18      	ldr	r2, [pc, #96]	; (800276c <TIM_OC1_SetConfig+0xec>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_OC1_SetConfig+0xa0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <TIM_OC1_SetConfig+0xf0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_OC1_SetConfig+0xa0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a16      	ldr	r2, [pc, #88]	; (8002774 <TIM_OC1_SetConfig+0xf4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d111      	bne.n	8002744 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4a15      	ldr	r2, [pc, #84]	; (8002778 <TIM_OC1_SetConfig+0xf8>)
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <TIM_OC1_SetConfig+0xfc>)
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b006      	add	sp, #24
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	fffeff8f 	.word	0xfffeff8f
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40014400 	.word	0x40014400
 8002774:	40014800 	.word	0x40014800
 8002778:	fffffeff 	.word	0xfffffeff
 800277c:	fffffdff 	.word	0xfffffdff

08002780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2210      	movs	r2, #16
 8002790:	4393      	bics	r3, r2
 8002792:	001a      	movs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <TIM_OC2_SetConfig+0xe0>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <TIM_OC2_SetConfig+0xe4>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2220      	movs	r2, #32
 80027ca:	4393      	bics	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a22      	ldr	r2, [pc, #136]	; (8002868 <TIM_OC2_SetConfig+0xe8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10d      	bne.n	80027fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	4393      	bics	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	4393      	bics	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <TIM_OC2_SetConfig+0xe8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <TIM_OC2_SetConfig+0x96>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a18      	ldr	r2, [pc, #96]	; (800286c <TIM_OC2_SetConfig+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_OC2_SetConfig+0x96>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a17      	ldr	r2, [pc, #92]	; (8002870 <TIM_OC2_SetConfig+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d113      	bne.n	800283e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <TIM_OC2_SetConfig+0xf4>)
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <TIM_OC2_SetConfig+0xf8>)
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	621a      	str	r2, [r3, #32]
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b006      	add	sp, #24
 800285e:	bd80      	pop	{r7, pc}
 8002860:	feff8fff 	.word	0xfeff8fff
 8002864:	fffffcff 	.word	0xfffffcff
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40014400 	.word	0x40014400
 8002870:	40014800 	.word	0x40014800
 8002874:	fffffbff 	.word	0xfffffbff
 8002878:	fffff7ff 	.word	0xfffff7ff

0800287c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <TIM_OC3_SetConfig+0xdc>)
 800288c:	401a      	ands	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <TIM_OC3_SetConfig+0xe0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2203      	movs	r2, #3
 80028b0:	4393      	bics	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <TIM_OC3_SetConfig+0xe4>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a23      	ldr	r2, [pc, #140]	; (8002964 <TIM_OC3_SetConfig+0xe8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10d      	bne.n	80028f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <TIM_OC3_SetConfig+0xec>)
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	; (800296c <TIM_OC3_SetConfig+0xf0>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <TIM_OC3_SetConfig+0xe8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_OC3_SetConfig+0x92>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <TIM_OC3_SetConfig+0xf4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_OC3_SetConfig+0x92>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <TIM_OC3_SetConfig+0xf8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <TIM_OC3_SetConfig+0xfc>)
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <TIM_OC3_SetConfig+0x100>)
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	fffffeff 	.word	0xfffffeff
 800295c:	fffeff8f 	.word	0xfffeff8f
 8002960:	fffffdff 	.word	0xfffffdff
 8002964:	40012c00 	.word	0x40012c00
 8002968:	fffff7ff 	.word	0xfffff7ff
 800296c:	fffffbff 	.word	0xfffffbff
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800
 8002978:	ffffefff 	.word	0xffffefff
 800297c:	ffffdfff 	.word	0xffffdfff

08002980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <TIM_OC4_SetConfig+0xa8>)
 8002990:	401a      	ands	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <TIM_OC4_SetConfig+0xac>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <TIM_OC4_SetConfig+0xb0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <TIM_OC4_SetConfig+0xb4>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	031b      	lsls	r3, r3, #12
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <TIM_OC4_SetConfig+0xb8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_OC4_SetConfig+0x70>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <TIM_OC4_SetConfig+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_OC4_SetConfig+0x70>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <TIM_OC4_SetConfig+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d109      	bne.n	8002a04 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <TIM_OC4_SetConfig+0xc4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	ffffefff 	.word	0xffffefff
 8002a2c:	feff8fff 	.word	0xfeff8fff
 8002a30:	fffffcff 	.word	0xfffffcff
 8002a34:	ffffdfff 	.word	0xffffdfff
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40014400 	.word	0x40014400
 8002a40:	40014800 	.word	0x40014800
 8002a44:	ffffbfff 	.word	0xffffbfff

08002a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <TIM_OC5_SetConfig+0x9c>)
 8002a58:	401a      	ands	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <TIM_OC5_SetConfig+0xa0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <TIM_OC5_SetConfig+0xa4>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <TIM_OC5_SetConfig+0xa8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_OC5_SetConfig+0x66>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <TIM_OC5_SetConfig+0xac>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_OC5_SetConfig+0x66>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <TIM_OC5_SetConfig+0xb0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d109      	bne.n	8002ac2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <TIM_OC5_SetConfig+0x9c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b006      	add	sp, #24
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	fffeffff 	.word	0xfffeffff
 8002ae8:	fffeff8f 	.word	0xfffeff8f
 8002aec:	fffdffff 	.word	0xfffdffff
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800

08002afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <TIM_OC6_SetConfig+0xa0>)
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <TIM_OC6_SetConfig+0xa4>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <TIM_OC6_SetConfig+0xa8>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	051b      	lsls	r3, r3, #20
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <TIM_OC6_SetConfig+0xac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_OC6_SetConfig+0x68>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a15      	ldr	r2, [pc, #84]	; (8002bac <TIM_OC6_SetConfig+0xb0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_OC6_SetConfig+0x68>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <TIM_OC6_SetConfig+0xb4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d109      	bne.n	8002b78 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <TIM_OC6_SetConfig+0xb8>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b006      	add	sp, #24
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	ffefffff 	.word	0xffefffff
 8002ba0:	feff8fff 	.word	0xfeff8fff
 8002ba4:	ffdfffff 	.word	0xffdfffff
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800
 8002bb4:	fffbffff 	.word	0xfffbffff

08002bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	221f      	movs	r2, #31
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2201      	movs	r2, #1
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	0013      	movs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	211f      	movs	r1, #31
 8002be8:	400b      	ands	r3, r1
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4099      	lsls	r1, r3
 8002bee:	000b      	movs	r3, r1
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b006      	add	sp, #24
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e04a      	b.n	8002cae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223c      	movs	r2, #60	; 0x3c
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223d      	movs	r2, #61	; 0x3d
 8002c24:	2102      	movs	r1, #2
 8002c26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2270      	movs	r2, #112	; 0x70
 8002c58:	4393      	bics	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10c      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	4393      	bics	r3, r2
 8002c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223d      	movs	r2, #61	; 0x3d
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223c      	movs	r2, #60	; 0x3c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	ff0fffff 	.word	0xff0fffff
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223c      	movs	r2, #60	; 0x3c
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e079      	b.n	8002dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	223c      	movs	r2, #60	; 0x3c
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	4393      	bics	r3, r2
 8002cee:	001a      	movs	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a35      	ldr	r2, [pc, #212]	; (8002de0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002d18:	401a      	ands	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002d26:	401a      	ands	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a2e      	ldr	r2, [pc, #184]	; (8002dec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002d42:	401a      	ands	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d106      	bne.n	8002d74 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d121      	bne.n	8002dc2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002d82:	401a      	ands	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	051b      	lsls	r3, r3, #20
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002d92:	401a      	ands	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002da0:	401a      	ands	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d106      	bne.n	8002dc2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a15      	ldr	r2, [pc, #84]	; (8002e0c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002db8:	401a      	ands	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223c      	movs	r2, #60	; 0x3c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffffcff 	.word	0xfffffcff
 8002de0:	fffffbff 	.word	0xfffffbff
 8002de4:	fffff7ff 	.word	0xfffff7ff
 8002de8:	ffffefff 	.word	0xffffefff
 8002dec:	ffffdfff 	.word	0xffffdfff
 8002df0:	ffffbfff 	.word	0xffffbfff
 8002df4:	fff0ffff 	.word	0xfff0ffff
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	efffffff 	.word	0xefffffff
 8002e00:	ff0fffff 	.word	0xff0fffff
 8002e04:	feffffff 	.word	0xfeffffff
 8002e08:	fdffffff 	.word	0xfdffffff
 8002e0c:	dfffffff 	.word	0xdfffffff

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4d0c      	ldr	r5, [pc, #48]	; (8002e48 <__libc_init_array+0x38>)
 8002e16:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	2600      	movs	r6, #0
 8002e22:	f000 f821 	bl	8002e68 <_init>
 8002e26:	4d0a      	ldr	r5, [pc, #40]	; (8002e50 <__libc_init_array+0x40>)
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	00b3      	lsls	r3, r6, #2
 8002e36:	58eb      	ldr	r3, [r5, r3]
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	00b3      	lsls	r3, r6, #2
 8002e40:	58eb      	ldr	r3, [r5, r3]
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002f14 	.word	0x08002f14
 8002e4c:	08002f14 	.word	0x08002f14
 8002e50:	08002f14 	.word	0x08002f14
 8002e54:	08002f18 	.word	0x08002f18

08002e58 <memset>:
 8002e58:	0003      	movs	r3, r0
 8002e5a:	1882      	adds	r2, r0, r2
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <memset+0xa>
 8002e60:	4770      	bx	lr
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e7f9      	b.n	8002e5c <memset+0x4>

08002e68 <_init>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr

08002e74 <_fini>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr
